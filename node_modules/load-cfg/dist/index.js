'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fs = require('fs-extra');
var path = require('path');
var findup = require('find-up');
var fp = require('lodash/fp');

const loadFile = (filepath, noCache) => {
    require('@babel/register')({
        cache: !noCache,
        presets: [['@babel/preset-env', { modules: 'commonjs' }]],
    });
    let file;
    if (noCache && filepath) {
        delete require.cache[path.resolve(filepath)];
    }
    try {
        const isJS = path.extname(filepath) === '.js';
        if (isJS) {
            const required = require(filepath);
            file = required.default || required;
        }
        else {
            file = fs.readJsonSync(filepath, { encoding: 'utf-8' });
        }
    }
    catch (err) {
        console.warn('There was an error loading your config:\n');
        console.warn(err);
    }
    return file;
};
const finds = (name) => [
    `${name}.json`,
    `.${name}rc`,
    `${name}rc.js`,
    `${name}rc.json`,
    `${name}.config.js`,
    `${name}.config.json`,
];
function load(name, defaultConfig, noCache, deep) {
    const filepath = findup.sync(finds(name));
    const file = filepath ? loadFile(filepath, noCache) : {};
    const next = defaultConfig
        ? deep
            ? fp.merge(defaultConfig, file)
            : Object.assign({}, defaultConfig, file)
        : file;
    // tslint:disable
    return next;
}
function loadFrom(filePath, defaultConfig, noCache, deep) {
    const file = loadFile(filePath, noCache);
    // tslint:disable
    return defaultConfig
        ? deep
            ? fp.merge(defaultConfig, file)
            : Object.assign({}, defaultConfig, file)
        : file;
}

exports.finds = finds;
exports.load = load;
exports.loadFile = loadFile;
exports.loadFrom = loadFrom;
