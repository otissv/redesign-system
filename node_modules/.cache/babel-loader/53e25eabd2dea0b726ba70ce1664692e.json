{"ast":null,"code":"import _toConsumableArray from \"/mnt/Storage/Projects/themed-styled-components/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/mnt/Storage/Projects/themed-styled-components/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/mnt/Storage/Projects/themed-styled-components/src/ButtonIcon/ButtonIcon.js\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React, { useContext, useMemo } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport Base from '../Base/Base';\nimport { sharedStyles } from '../utils';\nimport { ThemeContext } from '../ThemeContext';\nimport { buttonIconTheme } from './buttonIcon.theme';\nimport Button from '../Button/Button';\nexport var ButtonIcon = React.memo(function ButtonIcon(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      icon = _ref.icon,\n      onClick = _ref.onClick,\n      propsThemed = _ref.themed,\n      title = _ref.title,\n      uid = _ref.uid,\n      propsRest = _objectWithoutProperties(_ref, [\"children\", \"className\", \"icon\", \"onClick\", \"themed\", \"title\", \"uid\"]);\n\n  var classNames = \"ButtonIcon \".concat(className || '');\n  var themed = useMemo(function () {\n    return [buttonIconTheme].concat(_toConsumableArray(propsThemed));\n  }, [buttonIconTheme, propsThemed]);\n  var Component = icon;\n  console.log(propsRest.appearance);\n  return React.createElement(Button, Object.assign({\n    className: classNames,\n    \"data-uid\": uid,\n    onClick: onClick,\n    themed: themed\n  }, propsRest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(Component, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, children));\n});\n\nif (typeof ButtonIcon !== 'undefined' && ButtonIcon && ButtonIcon === Object(ButtonIcon) && Object.isExtensible(ButtonIcon)) {\n  Object.defineProperty(ButtonIcon, '__filemeta', {\n    enumerable: true,\n    configurable: true,\n    value: {\n      name: \"ButtonIcon\",\n      filename: \"src/ButtonIcon/ButtonIcon.js\"\n    }\n  });\n}\n\nButtonIcon.defaultProps = {\n  themed: []\n};\nButtonIcon.propTypes = {\n  // icon: PropTypes.node.isRequired,\n  size: PropTypes.string,\n  themed: PropTypes.array\n};\nvar _default = ButtonIcon;\nexport default _default;\n\nif (typeof ButtonIcon !== 'undefined' && ButtonIcon && ButtonIcon === Object(ButtonIcon) && Object.isExtensible(ButtonIcon)) {\n  Object.defineProperty(ButtonIcon, '__filemeta', {\n    enumerable: true,\n    configurable: true,\n    value: {\n      name: \"ButtonIcon\",\n      filename: \"src/ButtonIcon/ButtonIcon.js\"\n    }\n  });\n}\n\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ButtonIcon, \"ButtonIcon\", \"/mnt/Storage/Projects/themed-styled-components/src/ButtonIcon/ButtonIcon.js\");\n  reactHotLoader.register(_default, \"default\", \"/mnt/Storage/Projects/themed-styled-components/src/ButtonIcon/ButtonIcon.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/mnt/Storage/Projects/themed-styled-components/src/ButtonIcon/ButtonIcon.js"],"names":["React","useContext","useMemo","styled","PropTypes","Base","sharedStyles","ThemeContext","buttonIconTheme","Button","ButtonIcon","memo","children","className","icon","onClick","propsThemed","themed","title","uid","propsRest","classNames","Component","console","log","appearance","defaultProps","propTypes","size","string","array"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,OAA5B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,IAAP,MAAiB,cAAjB;AAEA,SAASC,YAAT,QAA6B,UAA7B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,OAAO,IAAMC,UAAU,GAAGV,KAAK,CAACW,IAAN,CAAW,SAASD,UAAT,OASlC;AAAA,MARDE,QAQC,QARDA,QAQC;AAAA,MAPDC,SAOC,QAPDA,SAOC;AAAA,MANDC,IAMC,QANDA,IAMC;AAAA,MALDC,OAKC,QALDA,OAKC;AAAA,MAJOC,WAIP,QAJDC,MAIC;AAAA,MAHDC,KAGC,QAHDA,KAGC;AAAA,MAFDC,GAEC,QAFDA,GAEC;AAAA,MADEC,SACF;;AACD,MAAMC,UAAU,wBAAiBR,SAAS,IAAI,EAA9B,CAAhB;AACA,MAAMI,MAAM,GAAGf,OAAO,CAAC;AAAA,YAAOM,eAAP,4BAA2BQ,WAA3B;AAAA,GAAD,EAA0C,CAC9DR,eAD8D,EAE9DQ,WAF8D,CAA1C,CAAtB;AAKA,MAAMM,SAAS,GAAGR,IAAlB;AAEAS,EAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAS,CAACK,UAAtB;AAEA,SACE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAEJ,UADb;AAEE,gBAAUF,GAFZ;AAGE,IAAA,OAAO,EAAEJ,OAHX;AAIE,IAAA,MAAM,EAAEE;AAJV,KAKMG,SALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAME,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOR,QAAP,CAPF,CADF;AAWD,CA/ByB,CAAnB;;;;;;;;;;;;;AAiCPF,UAAU,CAACgB,YAAX,GAA0B;AACxBT,EAAAA,MAAM,EAAE;AADgB,CAA1B;AAIAP,UAAU,CAACiB,SAAX,GAAuB;AACrB;AACAC,EAAAA,IAAI,EAAExB,SAAS,CAACyB,MAFK;AAGrBZ,EAAAA,MAAM,EAAEb,SAAS,CAAC0B;AAHG,CAAvB;eAMepB,U;AAAf;;;;;;;;;;;;;;;;;;;;;;0BA3CaA,U","sourcesContent":["import React, { useContext, useMemo } from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nimport Base from '../Base/Base'\n\nimport { sharedStyles } from '../utils'\nimport { ThemeContext } from '../ThemeContext'\nimport { buttonIconTheme } from './buttonIcon.theme'\nimport Button from '../Button/Button'\n\nexport const ButtonIcon = React.memo(function ButtonIcon({\n  children,\n  className,\n  icon,\n  onClick,\n  themed: propsThemed,\n  title,\n  uid,\n  ...propsRest\n}) {\n  const classNames = `ButtonIcon ${className || ''}`\n  const themed = useMemo(() => [buttonIconTheme, ...propsThemed], [\n    buttonIconTheme,\n    propsThemed,\n  ])\n\n  const Component = icon\n\n  console.log(propsRest.appearance)\n\n  return (\n    <Button\n      className={classNames}\n      data-uid={uid}\n      onClick={onClick}\n      themed={themed}\n      {...propsRest}>\n      <Component />\n      <span>{children}</span>\n    </Button>\n  )\n})\n\nButtonIcon.defaultProps = {\n  themed: [],\n}\n\nButtonIcon.propTypes = {\n  // icon: PropTypes.node.isRequired,\n  size: PropTypes.string,\n  themed: PropTypes.array,\n}\n\nexport default ButtonIcon\n"]},"metadata":{},"sourceType":"module"}