'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _fetchRelativeFile = require('../fetchRelativeFile');

var _fetchRelativeFile2 = _interopRequireDefault(_fetchRelativeFile);

var _replaceImports = require('../replaceImports');

var _replaceImports2 = _interopRequireDefault(_replaceImports);

var _absolutesToRelative = require('../utils/absolutesToRelative');

var _absolutesToRelative2 = _interopRequireDefault(_absolutesToRelative);

var _parseFile = require('../parseFile');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(example, importReplacements, pkg, examplePath, gitInfo, config) {
    var exampleContent, content;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!example) {
              _context.next = 8;
              break;
            }

            _context.next = 3;
            return _promise2.default.resolve(example);

          case 3:
            exampleContent = _context.sent;
            content = (0, _replaceImports2.default)(exampleContent, importReplacements.map(function (m) {
              return [(0, _absolutesToRelative2.default)(examplePath, m[0]), m[1]];
            }));
            return _context.abrupt('return', (0, _parseFile.parseFile)(content, pkg));

          case 8:
            return _context.abrupt('return', (0, _fetchRelativeFile2.default)(examplePath, pkg, importReplacements, gitInfo, config));

          case 9:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function ensureExample(_x, _x2, _x3, _x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  }

  return ensureExample;
}();