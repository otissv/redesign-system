'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _fetchRelativeFile = require('../fetchRelativeFile');

var _fetchRelativeFile2 = _interopRequireDefault(_fetchRelativeFile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(maybePkg, importReplacements, gitInfo, config) {
    var pkg;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _promise2.default.resolve(maybePkg);

          case 2:
            pkg = _context.sent;

            if (!((typeof pkg === 'undefined' ? 'undefined' : (0, _typeof3.default)(pkg)) === 'object')) {
              _context.next = 7;
              break;
            }

            return _context.abrupt('return', pkg);

          case 7:
            if (!(typeof pkg === 'string')) {
              _context.next = 11;
              break;
            }

            return _context.abrupt('return', (0, _fetchRelativeFile2.default)(pkg,
            // $FlowFixMe - we know here that this will not be a js file, the only time we NEED a pkg
            {}, importReplacements, gitInfo).then(function (_ref2) {
              var file = _ref2.file;
              return JSON.parse(file);
            }));

          case 11:
            if (pkg) {
              _context.next = 15;
              break;
            }

            return _context.abrupt('return', (0, _fetchRelativeFile2.default)('package.json',
            // $FlowFixMe - we know here that this will not be a js file, the only time we NEED a pkg
            {}, importReplacements, gitInfo, config).then(function (_ref3) {
              var file = _ref3.file;
              return JSON.parse(file);
            }));

          case 15:
            throw new Error('could not understand passed in package.json');

          case 16:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function ensurePKGJSON(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  }

  return ensurePKGJSON;
}();