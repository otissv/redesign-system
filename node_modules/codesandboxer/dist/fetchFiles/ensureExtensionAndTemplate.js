'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ensureExtensionAndTemplate = function ensureExtensionAndTemplate(extension) {
  var extensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var template = arguments[2];

  var extensionsSet = new _set2.default(['.js', '.json'].concat((0, _toConsumableArray3.default)(extensions)));
  extensionsSet.add(extension);

  if (['.ts', '.tsx'].includes(extension) || template === 'create-react-app-typescript') {
    if (!template) template = 'create-react-app-typescript';
    extensionsSet.add('.ts');
    extensionsSet.add('.tsx');
  }

  if (extension === '.vue' || template === 'vue-cli') {
    if (!template) template = 'vue-cli';
    extensionsSet.add('.vue');
  }

  if (!template) {
    template = 'create-react-app';
  }

  return { extensions: [].concat((0, _toConsumableArray3.default)(extensionsSet)), template: template };
};

exports.default = ensureExtensionAndTemplate;

/*
That other implementation:

  if (!config.template) {
    if (['.ts', '.tsx'].includes(extension)) {
      config.template = 'create-react-app-typescript';
    } else if (extension === '.vue' && !config.template) {
      config.template = 'vue-cli';
    } else {
      config.template = 'create-react-app';
    }
  }

  let extensions = ['.js', '.json'];
  if (config.extensions) extensions = [...extensions, ...config.extensions];
  if (
    extension &&
    !baseExtensions.includes(extension) &&
    !extensions.includes(extension)
  ) {
    extensions.push(extension);
  }
*/