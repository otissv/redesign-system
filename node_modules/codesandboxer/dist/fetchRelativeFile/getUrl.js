'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

exports.default = getUrl;

var _pathBrowserify = require('path-browserify');

var _pathBrowserify2 = _interopRequireDefault(_pathBrowserify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var raw = {
  github: function github(filePath, _ref) {
    var account = _ref.account,
        repository = _ref.repository,
        _ref$branch = _ref.branch,
        branch = _ref$branch === undefined ? 'master' : _ref$branch;
    return 'https://raw.githubusercontent.com/' + account + '/' + repository + '/' + branch + '/' + filePath;
  },
  bitbucket: function bitbucket(filePath, _ref2) {
    var account = _ref2.account,
        repository = _ref2.repository,
        _ref2$branch = _ref2.branch,
        branch = _ref2$branch === undefined ? 'master' : _ref2$branch;
    return 'https://api.bitbucket.org/1.0/repositories/' + account + '/' + repository + '/raw/' + branch + '/' + filePath;
  }
};

function getUrl(filePath, _ref3) {
  var host = _ref3.host,
      urlConfig = (0, _objectWithoutProperties3.default)(_ref3, ['host']);

  var getRaw = raw[host];
  if (typeof getRaw !== 'function') {
    throw new Error('Could not parse files from ' + host);
  }

  var url = getRaw(filePath, urlConfig);
  var extName = _pathBrowserify2.default.extname(filePath);
  if (!extName) {
    return { fileType: '.js', url: url + '.js' };
  } else {
    return { fileType: extName, url: url };
  }
}