import { parse } from '@babel/parser';
import traverse from '@babel/traverse';
import generator__default from '@babel/generator';
import get from 'lodash/get';

const fromSpecifiers = (specifiers = []) => Array.isArray(specifiers) && specifiers.length > 0
    ? specifiers.map(specifier => get(specifier, 'local.name'))
    : [];
const traverseOnImports = (fn) => (node) => {
    try {
        const ast = parse(node.value, { sourceType: 'module' });
        let populated = [];
        traverse(ast, {
            enter(path) {
                if (path.isImportDeclaration()) {
                    populated = populated.concat(fn(path));
                    return;
                }
            },
        });
        return populated;
    }
    catch (err) {
        return [];
    }
};
const getFullImports = traverseOnImports((path) => [
    get(generator__default(path.node), 'code'),
]);
const getImportsVariables = traverseOnImports((path) => fromSpecifiers(path.node.specifiers));

export { getFullImports, getImportsVariables };
