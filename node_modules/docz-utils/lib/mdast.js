'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var get = _interopDefault(require('lodash/get'));
var vfile = _interopDefault(require('to-vfile'));
var unified = _interopDefault(require('unified'));
var remark = _interopDefault(require('remark-parse'));
var matter = _interopDefault(require('remark-frontmatter'));
var slug = _interopDefault(require('remark-slug'));
var parseFrontmatter = _interopDefault(require('remark-parse-yaml'));
var find = _interopDefault(require('unist-util-find'));
var is = _interopDefault(require('unist-util-is'));
var visit = _interopDefault(require('unist-util-visit'));
var humanize = _interopDefault(require('humanize-string'));
var flatten = _interopDefault(require('lodash/flatten'));

const parseMdx = (file, plugins) => {
    const raw = vfile.readSync(file, 'utf-8');
    const parser = unified()
        .use(remark, { type: 'yaml', marker: '-' })
        .use(matter)
        .use(parseFrontmatter)
        .use(slug);
    for (const plugin of plugins) {
        const [item, opts = {}] = Array.isArray(plugin) ? plugin : [plugin];
        parser.use(item, opts);
    }
    return parser.run(parser.parse(raw));
};
const getChildValue = (children) => children.map((child) => child.children ? getChildValue(child.children) : child.value);
const valueFromHeading = (node) => {
    const children = get(node, 'children');
    const slug = get(node, 'data.id');
    if (Array.isArray(children)) {
        return flatten(getChildValue(children))
            .filter(Boolean)
            .join(' ');
    }
    return humanize(slug);
};
function extractAst(callback, type) {
    return ast => {
        const results = [];
        visit(ast, type, (node) => {
            results.push(callback(node));
        });
        return results;
    };
}
const headingsFromAst = extractAst((node) => ({
    slug: get(node, 'data.id'),
    depth: get(node, 'depth'),
    value: valueFromHeading(node),
}), 'heading');
const getParsedData = (ast) => {
    const node = find(ast, (node) => is('yaml', node));
    return get(node, `data.parsedValue`) || {};
};

exports.getParsedData = getParsedData;
exports.headingsFromAst = headingsFromAst;
exports.parseMdx = parseMdx;
