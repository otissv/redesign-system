'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = require('path');
var codesandboxerFs = require('codesandboxer-fs');
var unescapeJS = _interopDefault(require('unescape-js'));
require('prettier');
require('signale');
var format = require('./format.js');

const classComponent = (code) => {
    const match = code.match(/(class)(\s)(\w+)/m);
    const component = match && match[3];
    return `
    {() => {
      ${code}
      return <${component} />
    }}
  `;
};
const checkCodeToRender = (code) => {
    if (code.startsWith('()'))
        return `{${code}}`;
    if (code.startsWith('class'))
        return classComponent(code);
    return `<React.Fragment>${code}</React.Fragment>`;
};
const wrapCode = (code) => `import React from 'react';

  const doczStyles = {
    margin: '0 3px',
    padding: '4px 6px',
    fontFamily: '"Source Code Pro", monospace',
    fontSize: 14,
  };

  const App = ({ children }) => (
    <div style={doczStyles}>
      {children && typeof children === 'function' ? children() : children}
    </div>
  )

  export default () => (
    <App>
      ${checkCodeToRender(unescapeJS(code))}
    </App>
  )`;
function getSandboxFiles(code, imports, cwd) {
    const rawCode = [...imports, format.formatter(wrapCode(code))].join('\n');
    const examplePath = path.join(cwd, `codesandbox.example.csb.js`);
    return codesandboxerFs.assembleFiles(examplePath, {
        contents: rawCode,
        extensions: [
            '.js',
            '.jsx',
            '.ts',
            '.tsx',
            '.md',
            '.html',
            '.htm',
            '.css',
            '.css.less',
            '.css.sass',
            '.less',
            '.sass',
            '.scss',
            '.svg',
            '.png',
            '.jpg',
            '.jpeg',
        ],
    });
}
const getSandboxImportInfo = async (child, imports, cwd) => {
    let info;
    try {
        const { parameters } = await getSandboxFiles(child, imports, cwd);
        info = parameters;
    }
    catch (e) {
        console.error('Could not create Open in CodeSandbox', e);
    }
    return info;
};

exports.getSandboxImportInfo = getSandboxImportInfo;
