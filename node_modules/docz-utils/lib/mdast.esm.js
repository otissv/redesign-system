import get from 'lodash/get';
import vfile from 'to-vfile';
import unified from 'unified';
import remark from 'remark-parse';
import matter from 'remark-frontmatter';
import slug from 'remark-slug';
import parseFrontmatter from 'remark-parse-yaml';
import find from 'unist-util-find';
import is from 'unist-util-is';
import visit from 'unist-util-visit';
import humanize from 'humanize-string';
import flatten from 'lodash/flatten';

const parseMdx = (file, plugins) => {
    const raw = vfile.readSync(file, 'utf-8');
    const parser = unified()
        .use(remark, { type: 'yaml', marker: '-' })
        .use(matter)
        .use(parseFrontmatter)
        .use(slug);
    for (const plugin of plugins) {
        const [item, opts = {}] = Array.isArray(plugin) ? plugin : [plugin];
        parser.use(item, opts);
    }
    return parser.run(parser.parse(raw));
};
const getChildValue = (children) => children.map((child) => child.children ? getChildValue(child.children) : child.value);
const valueFromHeading = (node) => {
    const children = get(node, 'children');
    const slug = get(node, 'data.id');
    if (Array.isArray(children)) {
        return flatten(getChildValue(children))
            .filter(Boolean)
            .join(' ');
    }
    return humanize(slug);
};
function extractAst(callback, type) {
    return ast => {
        const results = [];
        visit(ast, type, (node) => {
            results.push(callback(node));
        });
        return results;
    };
}
const headingsFromAst = extractAst((node) => ({
    slug: get(node, 'data.id'),
    depth: get(node, 'depth'),
    value: valueFromHeading(node),
}), 'heading');
const getParsedData = (ast) => {
    const node = find(ast, (node) => is('yaml', node));
    return get(node, `data.parsedValue`) || {};
};

export { getParsedData, headingsFromAst, parseMdx };
