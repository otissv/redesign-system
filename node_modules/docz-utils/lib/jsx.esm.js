import '@babel/parser';
import '@babel/traverse';
import { valueFromTraverse, codeFromNode } from './ast.esm.js';
import { getPropValue, getProp } from 'jsx-ast-utils';
import strip from 'strip-indent';
import escapeJS from 'js-string-escape';

const propFromElement = (prop) => valueFromTraverse(p => p.isJSXOpeningElement(), p => getPropValue(getProp(p.node.attributes, prop)));
const removeTags = (code) => {
    const open = codeFromNode(p => p.isJSXOpeningElement());
    const close = codeFromNode(p => p.isJSXClosingElement());
    return code.replace(open(code), '').replace(close(code), '');
};
const sanitizeCode = (code) => {
    const trimmed = strip(code).trim();
    const newCode = trimmed.startsWith('{') && trimmed.endsWith('}')
        ? trimmed.substr(1, trimmed.length - 2).trim()
        : trimmed;
    return escapeJS(strip(newCode));
};
const componentName = (value) => {
    const match = value.match(/^\<\\?(\w+)/);
    return match && match[1];
};

export { componentName, propFromElement, removeTags, sanitizeCode };
