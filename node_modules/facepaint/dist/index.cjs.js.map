{"version":3,"file":"index.cjs.js","sources":["../src/index.js"],"sourcesContent":["/* eslint-disable no-param-reassign */\nexport default function(breakpoints, { literal, overlap } = {}) {\n  const mq = literal ? breakpoints : ['&'].concat(breakpoints)\n\n  function flatten(obj) {\n    if (typeof obj !== 'object' || obj == null) {\n      return []\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(flatten)\n    }\n\n    const slots = {}\n    const objects = {}\n    const props = {}\n    Object.keys(obj).forEach(key => {\n      // Check if value is an array, but skip if it looks like a selector.\n      // key.indexOf('&') === 0\n\n      let item = obj[key]\n      if (!Array.isArray(item) && literal) item = [item]\n\n      if ((literal || Array.isArray(item)) && key.charCodeAt(0) !== 38) {\n        let prior\n        item.forEach((v, index) => {\n          // Optimize by removing duplicated media query entries\n          // when they are explicitly known to overlap.\n          if (overlap && prior === v) {\n            return\n          }\n\n          if (v == null) {\n            // Do not create entries for undefined values as this will\n            // generate empty media media quries\n            return\n          }\n\n          prior = v\n\n          if (index === 0 && !literal) {\n            props[key] = v\n          } else if (slots[mq[index]] === undefined) {\n            slots[mq[index]] = { [key]: v }\n          } else {\n            slots[mq[index]][key] = v\n          }\n        })\n      } else if (typeof item === 'object') {\n        objects[key] = flatten(item)\n      } else {\n        props[key] = item\n      }\n    })\n\n    // Ensure that all slots and then child objects are pushed to the end\n    mq.forEach(el => {\n      if (slots[el]) {\n        props[el] = slots[el];\n      }\n    })\n    Object.assign(props, objects)\n    return props\n  }\n\n  return (...values) => values.map(flatten)\n}\n"],"names":["breakpoints","literal","overlap","mq","concat","flatten","obj","Array","isArray","map","slots","objects","props","keys","forEach","item","key","charCodeAt","prior","v","index","undefined","el","assign","values"],"mappings":";;AAAA;AACA,YAAe,UAASA,WAAT,EAAiD;iFAAJ,EAAI;MAAzBC,OAAyB,QAAzBA,OAAyB;MAAhBC,OAAgB,QAAhBA,OAAgB;;MACxDC,KAAKF,UAAUD,WAAV,GAAwB,CAAC,GAAD,EAAMI,MAAN,CAAaJ,WAAb,CAAnC;;WAESK,OAAT,CAAiBC,GAAjB,EAAsB;QAChB,OAAOA,GAAP,KAAe,QAAf,IAA2BA,OAAO,IAAtC,EAA4C;aACnC,EAAP;;;QAGEC,MAAMC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;aACfA,IAAIG,GAAJ,CAAQJ,OAAR,CAAP;;;QAGIK,QAAQ,EAAd;QACMC,UAAU,EAAhB;QACMC,QAAQ,EAAd;WACOC,IAAP,CAAYP,GAAZ,EAAiBQ,OAAjB,CAAyB,eAAO;;;;UAI1BC,OAAOT,IAAIU,GAAJ,CAAX;UACI,CAACT,MAAMC,OAAN,CAAcO,IAAd,CAAD,IAAwBd,OAA5B,EAAqCc,OAAO,CAACA,IAAD,CAAP;;UAEjC,CAACd,WAAWM,MAAMC,OAAN,CAAcO,IAAd,CAAZ,KAAoCC,IAAIC,UAAJ,CAAe,CAAf,MAAsB,EAA9D,EAAkE;YAC5DC,cAAJ;aACKJ,OAAL,CAAa,UAACK,CAAD,EAAIC,KAAJ,EAAc;;;cAGrBlB,WAAWgB,UAAUC,CAAzB,EAA4B;;;;cAIxBA,KAAK,IAAT,EAAe;;;;;;kBAMPA,CAAR;;cAEIC,UAAU,CAAV,IAAe,CAACnB,OAApB,EAA6B;kBACrBe,GAAN,IAAaG,CAAb;WADF,MAEO,IAAIT,MAAMP,GAAGiB,KAAH,CAAN,MAAqBC,SAAzB,EAAoC;;;kBACnClB,GAAGiB,KAAH,CAAN,2CAAsBJ,GAAtB,IAA4BG,CAA5B;WADK,MAEA;kBACChB,GAAGiB,KAAH,CAAN,EAAiBJ,GAAjB,IAAwBG,CAAxB;;SApBJ;OAFF,MAyBO,IAAI,OAAOJ,IAAP,KAAgB,QAApB,EAA8B;gBAC3BC,GAAR,IAAeX,QAAQU,IAAR,CAAf;OADK,MAEA;cACCC,GAAN,IAAaD,IAAb;;KAnCJ;;;OAwCGD,OAAH,CAAW,cAAM;UACXJ,MAAMY,EAAN,CAAJ,EAAe;cACPA,EAAN,IAAYZ,MAAMY,EAAN,CAAZ;;KAFJ;WAKOC,MAAP,CAAcX,KAAd,EAAqBD,OAArB;WACOC,KAAP;;;SAGK;sCAAIY,MAAJ;YAAA;;;WAAeA,OAAOf,GAAP,CAAWJ,OAAX,CAAf;GAAP;;;;;"}