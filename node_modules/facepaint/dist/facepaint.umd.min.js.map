{"version":3,"file":"facepaint.umd.min.js","sources":["../src/index.js"],"sourcesContent":["/* eslint-disable no-param-reassign */\nexport default function(breakpoints, { literal, overlap } = {}) {\n  const mq = literal ? breakpoints : ['&'].concat(breakpoints)\n\n  function flatten(obj) {\n    if (typeof obj !== 'object' || obj == null) {\n      return []\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(flatten)\n    }\n\n    const slots = {}\n    const objects = {}\n    const props = {}\n    Object.keys(obj).forEach(key => {\n      // Check if value is an array, but skip if it looks like a selector.\n      // key.indexOf('&') === 0\n\n      let item = obj[key]\n      if (!Array.isArray(item) && literal) item = [item]\n\n      if ((literal || Array.isArray(item)) && key.charCodeAt(0) !== 38) {\n        let prior\n        item.forEach((v, index) => {\n          // Optimize by removing duplicated media query entries\n          // when they are explicitly known to overlap.\n          if (overlap && prior === v) {\n            return\n          }\n\n          if (v == null) {\n            // Do not create entries for undefined values as this will\n            // generate empty media media quries\n            return\n          }\n\n          prior = v\n\n          if (index === 0 && !literal) {\n            props[key] = v\n          } else if (slots[mq[index]] === undefined) {\n            slots[mq[index]] = { [key]: v }\n          } else {\n            slots[mq[index]][key] = v\n          }\n        })\n      } else if (typeof item === 'object') {\n        objects[key] = flatten(item)\n      } else {\n        props[key] = item\n      }\n    })\n\n    // Ensure that all slots and then child objects are pushed to the end\n    mq.forEach(el => {\n      if (slots[el]) {\n        props[el] = slots[el];\n      }\n    })\n    Object.assign(props, objects)\n    return props\n  }\n\n  return (...values) => values.map(flatten)\n}\n"],"names":["breakpoints","flatten","obj","Array","isArray","map","slots","objects","props","keys","forEach","item","key","literal","charCodeAt","prior","v","index","overlap","undefined","mq","el","assign","concat","values"],"mappings":"4LACe,SAASA,YAGbC,EAAQC,MACI,iBAARA,GAA2B,MAAPA,cAI3BC,MAAMC,QAAQF,UACTA,EAAIG,IAAIJ,OAGXK,KACAC,KACAC,mBACCC,KAAKP,GAAKQ,QAAQ,gBAInBC,EAAOT,EAAIU,OACVT,MAAMC,QAAQO,IAASE,IAASF,GAAQA,KAExCE,GAAWV,MAAMC,QAAQO,KAAgC,KAAtBC,EAAIE,WAAW,GAAW,KAC5DC,WACCL,QAAQ,SAACM,EAAGC,QAGXC,GAAWH,IAAUC,IAIhB,MAALA,OAMIA,EAEM,IAAVC,GAAgBJ,EAEb,QAAyBM,IAArBb,EAAMc,EAAGH,IAAuB,SACnCG,EAAGH,YAAaL,GAAMI,YAEtBI,EAAGH,IAAQL,GAAOI,SAJlBJ,GAAOI,QAOQ,iBAATL,IACRC,GAAOX,EAAQU,KAEjBC,GAAOD,MAKdD,QAAQ,YACLJ,EAAMe,OACFA,GAAMf,EAAMe,aAGfC,OAAOd,EAAOD,GACdC,kEA7D4BK,IAAAA,QAASK,IAAAA,QACxCE,EAAKP,EAAUb,GAAe,KAAKuB,OAAOvB,UA+DzC,sCAAIwB,gDAAWA,EAAOnB,IAAIJ"}