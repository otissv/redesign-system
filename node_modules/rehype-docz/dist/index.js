'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = require('path');
var is = _interopDefault(require('unist-util-is'));
var flatten = _interopDefault(require('lodash/flatten'));
var nodeToString = _interopDefault(require('hast-util-to-string'));
var format = require('docz-utils/lib/format');
var jsx = require('docz-utils/lib/jsx');
var codesandbox = require('docz-utils/lib/codesandbox');
var imports = require('docz-utils/lib/imports');

const isPlayground = (name) => name === 'Playground';
const addComponentsProps = (scopes, imports, cwd, useCodeSandbox) => async (node, idx) => {
    const name = jsx.componentName(node.value);
    const tagOpen = new RegExp(`^\\<${name}`);
    if (isPlayground(name)) {
        const formatted = await format.format(nodeToString(node));
        const code = formatted.slice(1, Infinity);
        const scope = `{props: this ? this.props : props,${scopes.join(',')}}`;
        const child = jsx.sanitizeCode(jsx.removeTags(code));
        if (useCodeSandbox) {
            const codesandBoxInfo = await codesandbox.getSandboxImportInfo(child, imports, cwd);
            node.value = node.value.replace(tagOpen, `<${name} __codesandbox={\`${codesandBoxInfo}\`}`);
        }
        node.value = node.value.replace(tagOpen, `<${name} __position={${idx}} __code={'${child}'} __scope={${scope}}`);
    }
};
var index = (opts) => (tree, fileInfo) => {
    const { root, useCodeSandbox } = opts;
    const importNodes = tree.children.filter((node) => is('import', node));
    const imports$1 = flatten(importNodes.map(imports.getFullImports));
    const scopes = flatten(importNodes.map(imports.getImportsVariables));
    const fileInfoHistory = fileInfo.history[0] ? fileInfo.history[0] : '';
    const fileCwd = path.relative(root, path.dirname(fileInfoHistory));
    const nodes = tree.children
        .filter((node) => is('jsx', node))
        .map(addComponentsProps(scopes, imports$1, fileCwd, useCodeSandbox));
    return Promise.all(nodes).then(() => tree);
};

module.exports = index;
