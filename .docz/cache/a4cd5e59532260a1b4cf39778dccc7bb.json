{"remainingRequest":"/mnt/Storage/Projects/redesign/node_modules/thread-loader/dist/cjs.js??ref--11-1!/mnt/Storage/Projects/redesign/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--11-2!/mnt/Storage/Projects/redesign/node_modules/source-map-loader/index.js!/mnt/Storage/Projects/redesign/src/Toggle/Toggle.tsx","dependencies":[{"path":"/mnt/Storage/Projects/redesign/src/Toggle/Toggle.tsx","mtime":1561624988250},{"path":"/mnt/Storage/Projects/redesign/node_modules/cache-loader/dist/cjs.js","mtime":1558371898492},{"path":"/mnt/Storage/Projects/redesign/node_modules/thread-loader/dist/cjs.js","mtime":1555245588536},{"path":"/mnt/Storage/Projects/redesign/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1558369220865},{"path":"/mnt/Storage/Projects/redesign/node_modules/source-map-loader/index.js","mtime":1550658762472}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/Storage/Projects/redesign/src/Toggle/Toggle.tsx"],"names":["React","useMemo","Base","toggleInputTheme","toggleLabelTheme","toggleTheme","toggleContentTheme","ToggleInput","checked","className","themed","propsRest","classNames","_themed","defaultProps","ToggleLabel","ToggleContent","width","height","Toggle","id","children","hideText","toggle","state","setState","handleClick","e","preventDefault"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\n\nimport { Base } from '../Base';\nimport {\n  ToggleInterface,\n  ToggleInputInterface,\n  ToggleLabelInterface,\n  ToggleContentInterface,\n} from './toggle.types';\nimport {\n  // toggleAppearanceTheme,\n  toggleInputTheme,\n  toggleLabelTheme,\n  toggleTheme,\n  toggleContentTheme,\n} from './toggle.theme';\n\nexport function ToggleInput({\n  checked,\n  className,\n  themed,\n  ...propsRest\n}: ToggleInputInterface) {\n  const classNames = `ToggleInput ${className}`;\n  const _themed = useMemo(() => [toggleInputTheme], [toggleInputTheme]);\n\n  return (\n    <Base\n      as=\"input\"\n      type=\"checkbox\"\n      className={classNames}\n      themed={_themed}\n      {...propsRest}\n    />\n  );\n}\n\nToggleInput.defaultProps = {\n  className: '',\n};\n\nexport function ToggleLabel({\n  checked,\n  className,\n  ...propsRest\n}: ToggleLabelInterface) {\n  const classNames = `ToggleLabel ${className}`;\n  const _themed = useMemo(() => [toggleLabelTheme], [toggleLabelTheme, ,]);\n\n  return (\n    <Base as=\"label\" className={classNames} themed={_themed} {...propsRest} />\n  );\n}\n\nexport function ToggleContent({\n  checked,\n  className,\n  ...propsRest\n}: ToggleContentInterface) {\n  const classNames = `ToggleContent ${className}`;\n  const _themed = useMemo(() => [toggleContentTheme], [toggleContentTheme, ,]);\n\n  return (\n    <Base as=\"label\" className={classNames} themed={_themed} {...propsRest} />\n  );\n}\n\nToggleContent.defaultProps = {\n  className: '',\n  width: '90px',\n  height: '90px',\n  themed: [],\n};\n\nexport function Toggle({\n  id,\n  children,\n  className,\n  hideText,\n  height,\n  toggle,\n  width,\n  themed,\n  ...propsRest\n}: ToggleInterface) {\n  const classNames = `Toggle ${className}`;\n  const _themed = useMemo(() => [toggleTheme, ...themed], [\n    toggleTheme,\n    themed,\n  ]);\n  const [state, setState] = toggle;\n\n  function handleClick(e) {\n    e.preventDefault();\n    setState(!state);\n  }\n\n  return (\n    <Base className={classNames} themed={_themed} {...propsRest}>\n      <ToggleInput\n        checked={state}\n        height={height}\n        id={id}\n        type=\"checkbox\"\n        width={width}\n      />\n      <ToggleLabel\n        checked={state}\n        height={height}\n        hideText={hideText}\n        htmlFor={id}\n        onClick={handleClick}\n        width={width}\n      >\n        {children || (\n          <ToggleContent\n            elevate={1}\n            toggle={state}\n            width=\"20px\"\n            height=\"20px\"\n          />\n        )}\n      </ToggleLabel>\n    </Base>\n  );\n}\n\nToggle.defaultProps = {\n  className: '',\n  width: '40px',\n  height: '20px',\n  themed: [],\n};\n\nexport default Toggle;\n"]}]}