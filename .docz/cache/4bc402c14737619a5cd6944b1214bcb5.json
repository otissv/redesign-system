{"remainingRequest":"/mnt/Storage/Projects/redesign/node_modules/thread-loader/dist/cjs.js??ref--11-1!/mnt/Storage/Projects/redesign/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--11-2!/mnt/Storage/Projects/redesign/node_modules/source-map-loader/index.js!/mnt/Storage/Projects/redesign/src/Toast/Toast.tsx","dependencies":[{"path":"/mnt/Storage/Projects/redesign/src/Toast/Toast.tsx","mtime":1561669451924},{"path":"/mnt/Storage/Projects/redesign/node_modules/cache-loader/dist/cjs.js","mtime":1558371898492},{"path":"/mnt/Storage/Projects/redesign/node_modules/thread-loader/dist/cjs.js","mtime":1555245588536},{"path":"/mnt/Storage/Projects/redesign/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1558369220865},{"path":"/mnt/Storage/Projects/redesign/node_modules/source-map-loader/index.js","mtime":1550658762472}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvbW50L1N0b3JhZ2UvUHJvamVjdHMvcmVkZXNpZ24vbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5IjsKaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIi9tbnQvU3RvcmFnZS9Qcm9qZWN0cy9yZWRlc2lnbi9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheSI7CmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAiL21udC9TdG9yYWdlL1Byb2plY3RzL3JlZGVzaWduL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcyI7CnZhciBfanN4RmlsZU5hbWUgPSAiL21udC9TdG9yYWdlL1Byb2plY3RzL3JlZGVzaWduL3NyYy9Ub2FzdC9Ub2FzdC50c3giOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgZW50ZXJNb2R1bGUgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5lbnRlck1vZHVsZTsKICBlbnRlck1vZHVsZSAmJiBlbnRlck1vZHVsZShtb2R1bGUpOwp9KSgpOwoKdmFyIF9fc2lnbmF0dXJlX18gPSB0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWxbImRlZmF1bHQiXS5zaWduYXR1cmUgOiBmdW5jdGlvbiAoYSkgewogIHJldHVybiBhOwp9OwoKaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JzsKaW1wb3J0IHsgVG9hc3ROb3RpZmljYXRpb24gfSBmcm9tICcuL1RvYXN0Tm90aWZpY2F0aW9uJzsKaW1wb3J0IGRpZmZlcmVuY2UgZnJvbSAnbG9kYXNoL2RpZmZlcmVuY2UnOwpleHBvcnQgdmFyIFRvYXN0Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe30pOwoKaWYgKHR5cGVvZiBUb2FzdENvbnRleHQgIT09ICd1bmRlZmluZWQnICYmIFRvYXN0Q29udGV4dCAmJiBUb2FzdENvbnRleHQgPT09IE9iamVjdChUb2FzdENvbnRleHQpICYmIE9iamVjdC5pc0V4dGVuc2libGUoVG9hc3RDb250ZXh0KSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb2FzdENvbnRleHQsICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJUb2FzdENvbnRleHQiLAogICAgICBmaWxlbmFtZTogInNyYy9Ub2FzdC9Ub2FzdC50c3giCiAgICB9CiAgfSk7Cn0KCmV4cG9ydCB2YXIgVG9hc3QgPSBmdW5jdGlvbiBUb2FzdChfcmVmKSB7CiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbiwKICAgICAgbWVzc2FnZXMgPSBfcmVmLm1lc3NhZ2VzLAogICAgICB0aW1lb3V0ID0gX3JlZi50aW1lb3V0LAogICAgICB0aGVtZWQgPSBfcmVmLnRoZW1lZCwKICAgICAgcHJvcHNSZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsiY2hpbGRyZW4iLCAibWVzc2FnZXMiLCAidGltZW91dCIsICJ0aGVtZWQiXSk7CgogIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShbXSksCiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLAogICAgICBub3RpZmljYXRpb25zID0gX3VzZVN0YXRlMlswXSwKICAgICAgc2V0Tm90aWZpY2F0aW9uID0gX3VzZVN0YXRlMlsxXTsKCiAgdmFyIG5ld05vdGlmaWNhdGlvblJlZiA9IHVzZVJlZihbXSk7CiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHsKICAgIHZhciBfbm90aWZpY2F0aW9uID0gY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjaGlsZCkgewogICAgICByZXR1cm4gewogICAgICAgIGlkOiBjaGlsZC5rZXksCiAgICAgICAgY29tcG9uZW50OiBjaGlsZAogICAgICB9OwogICAgfSk7CgogICAgbmV3Tm90aWZpY2F0aW9uUmVmLmN1cnJlbnQgPSBkaWZmZXJlbmNlKF9ub3RpZmljYXRpb24sIG5vdGlmaWNhdGlvbnMpOwogICAgc2V0Tm90aWZpY2F0aW9uKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobm90aWZpY2F0aW9ucyksIF90b0NvbnN1bWFibGVBcnJheShuZXdOb3RpZmljYXRpb25SZWYuY3VycmVudCkpKTsKICB9LCBbY2hpbGRyZW5dKTsKICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkgewogICAgdmFyIHJlbW92ZU5vdGlmaWNhdGlvbldpdGhUaW1lb3V0ID0gZnVuY3Rpb24gcmVtb3ZlTm90aWZpY2F0aW9uV2l0aFRpbWVvdXQoKSB7CiAgICAgIHZhciBub3RpZmljYXRpb25zRmlsdGVyID0gZnVuY3Rpb24gbm90aWZpY2F0aW9uc0ZpbHRlcihub3RpZmljYXRpb24pIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG4pIHsKICAgICAgICAgIHJldHVybiBuLmlkID09PSBub3RpZmljYXRpb24uaWQ7CiAgICAgICAgfTsKICAgICAgfTsKCiAgICAgIHNldE5vdGlmaWNhdGlvbihub3RpZmljYXRpb25zLmZpbHRlcihmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7CiAgICAgICAgcmV0dXJuIG5vdGlmaWNhdGlvbi5jb21wb25lbnQucHJvcHMuc3RpY2t5IHx8ICFuZXdOb3RpZmljYXRpb25SZWYuY3VycmVudC5maWx0ZXIobm90aWZpY2F0aW9uc0ZpbHRlcihub3RpZmljYXRpb24pKTsKICAgICAgfSkpOwogICAgfTsKCiAgICB2YXIgdGltZW91dEZuID0gc2V0VGltZW91dChyZW1vdmVOb3RpZmljYXRpb25XaXRoVGltZW91dCwgdGltZW91dCk7CiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICBjbGVhclRpbWVvdXQodGltZW91dEZuKTsKICAgIH07CiAgfSwgW25ld05vdGlmaWNhdGlvblJlZi5jdXJyZW50LCB0aW1lb3V0XSk7CgogIGZ1bmN0aW9uIGhhbmRsZU9uQ2xvc2UoZSkgewogICAgZS5wcmV2ZW50RGVmYXVsdCgpOwoKICAgIHZhciBub3RpZmljYXRpb25zRmlsdGVyID0gZnVuY3Rpb24gbm90aWZpY2F0aW9uc0ZpbHRlcihub3RpZmljYXRpb24pIHsKICAgICAgcmV0dXJuIG5vdGlmaWNhdGlvbi5pZCAhPT0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQudWlkOwogICAgfTsKCiAgICBzZXROb3RpZmljYXRpb24obm90aWZpY2F0aW9ucy5maWx0ZXIobm90aWZpY2F0aW9uc0ZpbHRlcikpOwogICAgbmV3Tm90aWZpY2F0aW9uUmVmLmN1cnJlbnQgPSBuZXdOb3RpZmljYXRpb25SZWYuY3VycmVudC5maWx0ZXIobm90aWZpY2F0aW9uc0ZpbHRlcik7CiAgfQoKICB2YXIgY29udGV4dCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHsKICAgICAgbm90aWZpY2F0aW9uczogbm90aWZpY2F0aW9ucywKICAgICAgc2V0Tm90aWZpY2F0aW9uOiBzZXROb3RpZmljYXRpb24KICAgIH07CiAgfSwgW25vdGlmaWNhdGlvbnMsIHNldE5vdGlmaWNhdGlvbl0pOwogIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRvYXN0Q29udGV4dC5Qcm92aWRlciwgewogICAgdmFsdWU6IGNvbnRleHQsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA4MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVG9hc3ROb3RpZmljYXRpb24sIE9iamVjdC5hc3NpZ24oewogICAgdGhlbWVkOiB0aGVtZWQsCiAgICBub3RpZmljYXRpb25zOiBub3RpZmljYXRpb25zCiAgfSwgcHJvcHNSZXN0LCB7CiAgICBvbkNsb3NlOiBoYW5kbGVPbkNsb3NlLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogODMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSkpOwp9OwoKX19zaWduYXR1cmVfXyhUb2FzdCwgInVzZVN0YXRle1tub3RpZmljYXRpb25zLCBzZXROb3RpZmljYXRpb25dKFtdKX1cbnVzZVJlZntuZXdOb3RpZmljYXRpb25SZWZ9XG51c2VFZmZlY3R7fVxudXNlRWZmZWN0e31cbnVzZU1lbW97Y29udGV4dH0iKTsKCmlmICh0eXBlb2YgVG9hc3QgIT09ICd1bmRlZmluZWQnICYmIFRvYXN0ICYmIFRvYXN0ID09PSBPYmplY3QoVG9hc3QpICYmIE9iamVjdC5pc0V4dGVuc2libGUoVG9hc3QpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvYXN0LCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiVG9hc3QiLAogICAgICBmaWxlbmFtZTogInNyYy9Ub2FzdC9Ub2FzdC50c3giCiAgICB9CiAgfSk7Cn0KClRvYXN0LmRlZmF1bHRQcm9wcyA9IHsKICBtZXNzYWdlczogW10sCiAgdGltZW91dDogMTAwMDAsCiAgdGhlbWVkOiBbXQp9Owp2YXIgX2RlZmF1bHQgPSBUb2FzdDsKZXhwb3J0IGRlZmF1bHQgX2RlZmF1bHQ7CgppZiAodHlwZW9mIFRvYXN0ICE9PSAndW5kZWZpbmVkJyAmJiBUb2FzdCAmJiBUb2FzdCA9PT0gT2JqZWN0KFRvYXN0KSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKFRvYXN0KSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb2FzdCwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIlRvYXN0IiwKICAgICAgZmlsZW5hbWU6ICJzcmMvVG9hc3QvVG9hc3QudHN4IgogICAgfQogIH0pOwp9Cgo7CgooZnVuY3Rpb24gKCkgewogIHZhciByZWFjdEhvdExvYWRlciA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmRlZmF1bHQ7CgogIGlmICghcmVhY3RIb3RMb2FkZXIpIHsKICAgIHJldHVybjsKICB9CgogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKFRvYXN0Q29udGV4dCwgIlRvYXN0Q29udGV4dCIsICIvbW50L1N0b3JhZ2UvUHJvamVjdHMvcmVkZXNpZ24vc3JjL1RvYXN0L1RvYXN0LnRzeCIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKFRvYXN0LCAiVG9hc3QiLCAiL21udC9TdG9yYWdlL1Byb2plY3RzL3JlZGVzaWduL3NyYy9Ub2FzdC9Ub2FzdC50c3giKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihfZGVmYXVsdCwgImRlZmF1bHQiLCAiL21udC9TdG9yYWdlL1Byb2plY3RzL3JlZGVzaWduL3NyYy9Ub2FzdC9Ub2FzdC50c3giKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkubGVhdmVNb2R1bGU7CiAgbGVhdmVNb2R1bGUgJiYgbGVhdmVNb2R1bGUobW9kdWxlKTsKfSkoKTs="},{"version":3,"sources":["/mnt/Storage/Projects/redesign/src/Toast/Toast.tsx"],"names":["React","useEffect","useMemo","useRef","useState","ToastNotification","difference","ToastContext","createContext","Toast","children","messages","timeout","themed","propsRest","notifications","setNotification","newNotificationRef","_notification","map","child","id","key","component","current","removeNotificationWithTimeout","notificationsFilter","notification","n","filter","props","sticky","timeoutFn","setTimeout","clearTimeout","handleOnClose","e","preventDefault","currentTarget","dataset","uid","context","defaultProps"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,MAApC,EAA4CC,QAA5C,QAA4D,OAA5D;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AAQA,OAAO,IAAMC,YAAY,GAAGP,KAAK,CAACQ,aAAN,CAAsC,EAAtC,CAArB;;;;;;;;;;;;;AAEP,OAAO,IAAMC,KAAK,GAAG,SAASA,KAAT,OAMF;AAAA,MALjBC,QAKiB,QALjBA,QAKiB;AAAA,MAJjBC,QAIiB,QAJjBA,QAIiB;AAAA,MAHjBC,OAGiB,QAHjBA,OAGiB;AAAA,MAFjBC,MAEiB,QAFjBA,MAEiB;AAAA,MADdC,SACc;;AAAA,kBACwBV,QAAQ,CAAC,EAAD,CADhC;AAAA;AAAA,MACVW,aADU;AAAA,MACKC,eADL;;AAEjB,MAAMC,kBAAkB,GAAGd,MAAM,CAAC,EAAD,CAAjC;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMiB,aAAa,GAAGR,QAAQ,CAACS,GAAT,CAAa,UAAAC,KAAK,EAAI;AAC1C,aAAO;AACLC,QAAAA,EAAE,EAAED,KAAK,CAACE,GADL;AAELC,QAAAA,SAAS,EAAEH;AAFN,OAAP;AAID,KALqB,CAAtB;;AAOAH,IAAAA,kBAAkB,CAACO,OAAnB,GAA6BlB,UAAU,CAACY,aAAD,EAAgBH,aAAhB,CAAvC;AACAC,IAAAA,eAAe,8BAAKD,aAAL,sBAAuBE,kBAAkB,CAACO,OAA1C,GAAf;AACD,GAVQ,EAUN,CAACd,QAAD,CAVM,CAAT;AAYAT,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMwB,6BAA6B,GAAG,SAAhCA,6BAAgC,GAAM;AAC1C,UAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,YAAD;AAAA,eAAyC,UACnEC,CADmE;AAAA,iBAEhEA,CAAC,CAACP,EAAF,KAASM,YAAY,CAACN,EAF0C;AAAA,SAAzC;AAAA,OAA5B;;AAIAL,MAAAA,eAAe,CACbD,aAAa,CAACc,MAAd,CAAqB,UAACF,YAAD,EAAyC;AAC5D,eACEA,YAAY,CAACJ,SAAb,CAAuBO,KAAvB,CAA6BC,MAA7B,IACA,CAACd,kBAAkB,CAACO,OAAnB,CAA2BK,MAA3B,CACCH,mBAAmB,CAACC,YAAD,CADpB,CAFH;AAMD,OAPD,CADa,CAAf;AAUD,KAfD;;AAiBA,QAAMK,SAAS,GAAGC,UAAU,CAACR,6BAAD,EAAgCb,OAAhC,CAA5B;AAEA,WAAO,YAAM;AACXsB,MAAAA,YAAY,CAACF,SAAD,CAAZ;AACD,KAFD;AAGD,GAvBQ,EAuBN,CAACf,kBAAkB,CAACO,OAApB,EAA6BZ,OAA7B,CAvBM,CAAT;;AAyBA,WAASuB,aAAT,CAAuBC,CAAvB,EAAyD;AACvDA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAMX,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,YAAD,EAAyC;AACnE,aAAOA,YAAY,CAACN,EAAb,KAAoBe,CAAC,CAACE,aAAF,CAAgBC,OAAhB,CAAwBC,GAAnD;AACD,KAFD;;AAIAxB,IAAAA,eAAe,CAACD,aAAa,CAACc,MAAd,CAAqBH,mBAArB,CAAD,CAAf;AACAT,IAAAA,kBAAkB,CAACO,OAAnB,GAA6BP,kBAAkB,CAACO,OAAnB,CAA2BK,MAA3B,CAC3BH,mBAD2B,CAA7B;AAGD;;AAED,MAAMe,OAAO,GAAGvC,OAAO,CACrB;AAAA,WAAO;AACLa,MAAAA,aAAa,EAAbA,aADK;AAELC,MAAAA,eAAe,EAAfA;AAFK,KAAP;AAAA,GADqB,EAKrB,CAACD,aAAD,EAAgBC,eAAhB,CALqB,CAAvB;AAQA,SACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEyB,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,iBAAD;AACE,IAAA,MAAM,EAAE5B,MADV;AAEE,IAAA,aAAa,EAAEE;AAFjB,KAGMD,SAHN;AAIE,IAAA,OAAO,EAAEqB,aAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAUD,CA9EM;;cAAM1B,K;;;;;;;;;;;;;AAgFbA,KAAK,CAACiC,YAAN,GAAqB;AACnB/B,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,MAAM,EAAE;AAHW,CAArB;eAMeJ,K;AAAf;;;;;;;;;;;;;;;;;;;;;;0BAxFaF,Y;0BAEAE,K","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { ToastNotification } from './ToastNotification';\nimport difference from 'lodash/difference';\n\nimport {\n  ToastInterface,\n  ToastMessageInterface,\n  ToastContextType,\n} from './toast.types';\n\nexport const ToastContext = React.createContext<ToastContextType>({});\n\nexport const Toast = function Toast({\n  children,\n  messages,\n  timeout,\n  themed,\n  ...propsRest\n}: ToastInterface) {\n  const [notifications, setNotification] = useState([]);\n  const newNotificationRef = useRef([]);\n\n  useEffect(() => {\n    const _notification = children.map(child => {\n      return {\n        id: child.key,\n        component: child,\n      };\n    });\n\n    newNotificationRef.current = difference(_notification, notifications);\n    setNotification([...notifications, ...newNotificationRef.current]);\n  }, [children]);\n\n  useEffect(() => {\n    const removeNotificationWithTimeout = () => {\n      const notificationsFilter = (notification: ToastMessageInterface) => (\n        n: ToastMessageInterface\n      ) => n.id === notification.id;\n\n      setNotification(\n        notifications.filter((notification: ToastMessageInterface) => {\n          return (\n            notification.component.props.sticky ||\n            !newNotificationRef.current.filter(\n              notificationsFilter(notification)\n            )\n          );\n        })\n      );\n    };\n\n    const timeoutFn = setTimeout(removeNotificationWithTimeout, timeout);\n\n    return () => {\n      clearTimeout(timeoutFn);\n    };\n  }, [newNotificationRef.current, timeout]);\n\n  function handleOnClose(e: React.MouseEvent<HTMLElement>) {\n    e.preventDefault();\n\n    const notificationsFilter = (notification: ToastMessageInterface) => {\n      return notification.id !== e.currentTarget.dataset.uid;\n    };\n\n    setNotification(notifications.filter(notificationsFilter));\n    newNotificationRef.current = newNotificationRef.current.filter(\n      notificationsFilter\n    );\n  }\n\n  const context = useMemo(\n    () => ({\n      notifications,\n      setNotification,\n    }),\n    [notifications, setNotification]\n  );\n\n  return (\n    <ToastContext.Provider value={context}>\n      <ToastNotification\n        themed={themed}\n        notifications={notifications}\n        {...propsRest}\n        onClose={handleOnClose}\n      />\n    </ToastContext.Provider>\n  );\n};\n\nToast.defaultProps = {\n  messages: [],\n  timeout: 10000,\n  themed: [],\n};\n\nexport default Toast;\n"]}]}