{"remainingRequest":"/mnt/Storage/Projects/themed-styled-components/node_modules/thread-loader/dist/cjs.js??ref--5-1!/mnt/Storage/Projects/themed-styled-components/node_modules/babel-loader/lib/index.js??ref--5-2!/mnt/Storage/Projects/themed-styled-components/node_modules/source-map-loader/index.js!/mnt/Storage/Projects/themed-styled-components/src/Toolbar/ToolbarCopyButton.js","dependencies":[{"path":"/mnt/Storage/Projects/themed-styled-components/src/Toolbar/ToolbarCopyButton.js","mtime":1557396093739},{"path":"/mnt/Storage/Projects/themed-styled-components/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/Storage/Projects/themed-styled-components/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/Storage/Projects/themed-styled-components/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/mnt/Storage/Projects/themed-styled-components/node_modules/source-map-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvbW50L1N0b3JhZ2UvUHJvamVjdHMvdGhlbWVkLXN0eWxlZC1jb21wb25lbnRzL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcyI7CnZhciBfanN4RmlsZU5hbWUgPSAiL21udC9TdG9yYWdlL1Byb2plY3RzL3RoZW1lZC1zdHlsZWQtY29tcG9uZW50cy9zcmMvVG9vbGJhci9Ub29sYmFyQ29weUJ1dHRvbi5qcyI7CgooZnVuY3Rpb24gKCkgewogIHZhciBlbnRlck1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmVudGVyTW9kdWxlOwogIGVudGVyTW9kdWxlICYmIGVudGVyTW9kdWxlKG1vZHVsZSk7Cn0pKCk7CgppbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JzsKaW1wb3J0IHsgQ29weVRvQ2xpcGJvYXJkIH0gZnJvbSAncmVhY3QtY29weS10by1jbGlwYm9hcmQnOwppbXBvcnQgeyBDb3B5IH0gZnJvbSAnLi4vTWF0ZXJpYWxJY29ucy9Db3B5JzsKaW1wb3J0IEJ1dHRvbkljb24gZnJvbSAnLi4vQnV0dG9uSWNvbi9CdXR0b25JY29uJzsKZXhwb3J0IHZhciBUb29sYmFyQ29weUJ1dHRvbiA9IFJlYWN0Lm1lbW8oZnVuY3Rpb24gVG9vbGJhckNvcHlCdXR0b24oX3JlZikgewogIHZhciBkYXRhID0gX3JlZi5kYXRhLAogICAgICBoYXNWaWV3cyA9IF9yZWYuaGFzVmlld3MsCiAgICAgIG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssCiAgICAgIHByb3BzUmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbImRhdGEiLCAiaGFzVmlld3MiLCAib25DbGljayJdKTsKCiAgdmFyIHRleHQgPSB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycgPyBkYXRhIDogSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMik7CgogIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHsKICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgIG9uQ2xpY2sgJiYgb25DbGljayhlKTsgLy9UT0RPOiBhZGQgY29waWVkIG5vdGlmaWNhdGlvbgogIH0KCiAgdmFyIGljb24gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBDb3B5OwogIH0sIFtDb3B5XSk7CiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29weVRvQ2xpcGJvYXJkLCB7CiAgICB0ZXh0OiB0ZXh0LAogICAgY29weTogaGFuZGxlQ2xpY2ssCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uSWNvbiwgT2JqZWN0LmFzc2lnbih7CiAgICB1aWQ6ICJjb3B5IiwKICAgIGljb246IGljb24KICB9LCBwcm9wc1Jlc3QsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSkpKTsKfSk7CgppZiAodHlwZW9mIFRvb2xiYXJDb3B5QnV0dG9uICE9PSAndW5kZWZpbmVkJyAmJiBUb29sYmFyQ29weUJ1dHRvbiAmJiBUb29sYmFyQ29weUJ1dHRvbiA9PT0gT2JqZWN0KFRvb2xiYXJDb3B5QnV0dG9uKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKFRvb2xiYXJDb3B5QnV0dG9uKSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb29sYmFyQ29weUJ1dHRvbiwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIlRvb2xiYXJDb3B5QnV0dG9uIiwKICAgICAgZmlsZW5hbWU6ICJzcmMvVG9vbGJhci9Ub29sYmFyQ29weUJ1dHRvbi5qcyIKICAgIH0KICB9KTsKfQoKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgcmVhY3RIb3RMb2FkZXIgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5kZWZhdWx0OwoKICBpZiAoIXJlYWN0SG90TG9hZGVyKSB7CiAgICByZXR1cm47CiAgfQoKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihUb29sYmFyQ29weUJ1dHRvbiwgIlRvb2xiYXJDb3B5QnV0dG9uIiwgIi9tbnQvU3RvcmFnZS9Qcm9qZWN0cy90aGVtZWQtc3R5bGVkLWNvbXBvbmVudHMvc3JjL1Rvb2xiYXIvVG9vbGJhckNvcHlCdXR0b24uanMiKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkubGVhdmVNb2R1bGU7CiAgbGVhdmVNb2R1bGUgJiYgbGVhdmVNb2R1bGUobW9kdWxlKTsKfSkoKTs="},{"version":3,"sources":["/mnt/Storage/Projects/themed-styled-components/src/Toolbar/ToolbarCopyButton.js"],"names":["React","useMemo","CopyToClipboard","Copy","ButtonIcon","ToolbarCopyButton","memo","data","hasViews","onClick","propsRest","text","JSON","stringify","handleClick","e","preventDefault","icon"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AAEA,SAASC,IAAT,QAAqB,uBAArB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,OAAO,IAAMC,iBAAiB,GAAGL,KAAK,CAACM,IAAN,CAAW,SAASD,iBAAT,OAKzC;AAAA,MAJDE,IAIC,QAJDA,IAIC;AAAA,MAHDC,QAGC,QAHDA,QAGC;AAAA,MAFDC,OAEC,QAFDA,OAEC;AAAA,MADEC,SACF;;AACD,MAAMC,IAAI,GAAG,OAAOJ,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCK,IAAI,CAACC,SAAL,CAAeN,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAA/C;;AAEA,WAASO,WAAT,CAAqBC,CAArB,EAAwB;AACtBA,IAAAA,CAAC,CAACC,cAAF;AACAP,IAAAA,OAAO,IAAIA,OAAO,CAACM,CAAD,CAAlB,CAFsB,CAGtB;AACD;;AAED,MAAME,IAAI,GAAGhB,OAAO,CAAC;AAAA,WAAME,IAAN;AAAA,GAAD,EAAa,CAACA,IAAD,CAAb,CAApB;AAEA,SACE,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAEQ,IAAvB;AAA6B,IAAA,IAAI,EAAEG,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAC,MAAhB;AAAuB,IAAA,IAAI,EAAEG;AAA7B,KAAuCP,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD,CArBgC,CAA1B;;;;;;;;;;;;;;;;;;;;;;0BAAML,iB","sourcesContent":["import React, { useMemo } from 'react'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\n\nimport { Copy } from '../MaterialIcons/Copy'\nimport ButtonIcon from '../ButtonIcon/ButtonIcon'\n\nexport const ToolbarCopyButton = React.memo(function ToolbarCopyButton({\n  data,\n  hasViews,\n  onClick,\n  ...propsRest\n}) {\n  const text = typeof data === 'string' ? data : JSON.stringify(data, null, 2)\n\n  function handleClick(e) {\n    e.preventDefault()\n    onClick && onClick(e)\n    //TODO: add copied notification\n  }\n\n  const icon = useMemo(() => Copy, [Copy])\n\n  return (\n    <CopyToClipboard text={text} copy={handleClick}>\n      <ButtonIcon uid=\"copy\" icon={icon} {...propsRest} />\n    </CopyToClipboard>\n  )\n})\n"]}]}