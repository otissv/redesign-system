{"remainingRequest":"/mnt/Storage/Projects/redesign/node_modules/thread-loader/dist/cjs.js??ref--11-1!/mnt/Storage/Projects/redesign/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--11-2!/mnt/Storage/Projects/redesign/node_modules/source-map-loader/index.js!/mnt/Storage/Projects/redesign/src/CoverImg/CoverImg.tsx","dependencies":[{"path":"/mnt/Storage/Projects/redesign/src/CoverImg/CoverImg.tsx","mtime":1561590566249},{"path":"/mnt/Storage/Projects/redesign/node_modules/cache-loader/dist/cjs.js","mtime":1558371898492},{"path":"/mnt/Storage/Projects/redesign/node_modules/thread-loader/dist/cjs.js","mtime":1555245588536},{"path":"/mnt/Storage/Projects/redesign/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1558369220865},{"path":"/mnt/Storage/Projects/redesign/node_modules/source-map-loader/index.js","mtime":1550658762472}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvbW50L1N0b3JhZ2UvUHJvamVjdHMvcmVkZXNpZ24vbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5IjsKaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvbW50L1N0b3JhZ2UvUHJvamVjdHMvcmVkZXNpZ24vbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKdmFyIF9qc3hGaWxlTmFtZSA9ICIvbW50L1N0b3JhZ2UvUHJvamVjdHMvcmVkZXNpZ24vc3JjL0NvdmVySW1nL0NvdmVySW1nLnRzeCI7CgooZnVuY3Rpb24gKCkgewogIHZhciBlbnRlck1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmVudGVyTW9kdWxlOwogIGVudGVyTW9kdWxlICYmIGVudGVyTW9kdWxlKG1vZHVsZSk7Cn0pKCk7Cgp2YXIgX19zaWduYXR1cmVfXyA9IHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbFsiZGVmYXVsdCJdLnNpZ25hdHVyZSA6IGZ1bmN0aW9uIChhKSB7CiAgcmV0dXJuIGE7Cn07CgppbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JzsKaW1wb3J0IEJhc2UgZnJvbSAnLi4vQmFzZS9CYXNlJzsKaW1wb3J0IHsgY292ZXJJbWdUaGVtZSB9IGZyb20gJy4vY292ZXJJbWcudGhlbWUnOwppbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICcuLi9Db250YWluZXInOwpleHBvcnQgZnVuY3Rpb24gT3ZlcmxheShfcmVmKSB7CiAgdmFyIGJhY2tncm91bmQgPSBfcmVmLmJhY2tncm91bmQ7CiAgdmFyIGJnQ29sb3IgPSB0eXBlb2YgYmFja2dyb3VuZCA9PT0gJ3N0cmluZycgPyBiYWNrZ3JvdW5kIDogJyMwMDAwMDA4MCc7CiAgcmV0dXJuIGJhY2tncm91bmQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRhaW5lciwgewogICAgY3NzOiAiXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgYmFja2dyb3VuZDogIi5jb25jYXQoYmdDb2xvciwgIjtcbiAgICAgICAgd2lkdGg6IGluaGVyaXQ7XG4gICAgICAgIGhlaWdodDogaW5oZXJpdDtcbiAgICAgICIpLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSA6IG51bGw7Cn0KCmlmICh0eXBlb2YgT3ZlcmxheSAhPT0gJ3VuZGVmaW5lZCcgJiYgT3ZlcmxheSAmJiBPdmVybGF5ID09PSBPYmplY3QoT3ZlcmxheSkgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShPdmVybGF5KSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPdmVybGF5LCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiT3ZlcmxheSIsCiAgICAgIGZpbGVuYW1lOiAic3JjL0NvdmVySW1nL0NvdmVySW1nLnRzeCIKICAgIH0KICB9KTsKfQoKZXhwb3J0IHZhciBDb3ZlckltZyA9IGZ1bmN0aW9uIENvdmVySW1nKF9yZWYyKSB7CiAgdmFyIGNoaWxkcmVuID0gX3JlZjIuY2hpbGRyZW4sCiAgICAgIGNsYXNzTmFtZSA9IF9yZWYyLmNsYXNzTmFtZSwKICAgICAgdGhlbWVkID0gX3JlZjIudGhlbWVkLAogICAgICBvdmVybGF5ID0gX3JlZjIub3ZlcmxheSwKICAgICAgcHJvcHNSZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbImNoaWxkcmVuIiwgImNsYXNzTmFtZSIsICJ0aGVtZWQiLCAib3ZlcmxheSJdKTsKCiAgLy8gY29tcG9uZW50RGlkTW91bnQoKSB7CiAgLy8gICAvLyB0aGlzLmVsZW1lbnQgPSBoZWxwZXJzLmdldEVsZW1lbnQodGhpcy5wcm9wcy5raXRpZCk7CiAgLy8gICAvLyB0aGlzLnVwZGF0ZUltZyh0aGlzLmVsZW1lbnQpOwogIC8vICAgLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMudXBkYXRlSW1nKTsKICAvLyB9CiAgLy8gY29tcG9uZW50V2lsbFVubW91bnQoKSB7CiAgLy8gICAvLyB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy51cGRhdGVJbWcpOwogIC8vIH0KICAvLyB1cGRhdGVJbWcoKSB7CiAgLy8gICAvLyBjb25zdCBwcm9wcyA9IHRoaXMucHJvcHM7CiAgLy8gICAvLyBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50OwogIC8vICAgLy8gbGV0IHNjcmVlbiA9IGhlbHBlcnMuYnJlYWtwb2ludHMoKS5zY3JlZW47CiAgLy8gICAvLyBsZXQgbG9ja2VkID0gZmFsc2U7CiAgLy8gICAvLyBpZiAoIWxvY2tlZCkgewogIC8vICAgLy8gICBjb25zdCB1cGRhdGVFbGVtZW50ID0gKG1lZGlhKSA9PiB7CiAgLy8gICAvLyAgICAgaWYgKHByb3BzLmNvdmVyKSB7CiAgLy8gICAvLyAgICAgICBlbGVtZW50LnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IHByb3BzW21lZGlhXS5zcmMgIGB1cmwoJHtwcm9wc1ttZWRpYV0uc3JjfSlgIDogYHVybCgke3Byb3BzLnNyY30pYDsKICAvLyAgIC8vICAgICB9IGVsc2UgewogIC8vICAgLy8gICAgICAgZWxlbWVudC5zcmMgPSBwcm9wc1ttZWRpYV0uc3JjIHx8IHByb3BzLnNyYzsKICAvLyAgIC8vICAgICAgIGVsZW1lbnQuYWx0ID0gcHJvcHNbbWVkaWFdLmFsdCB8fCBwcm9wcy5hbHQ7CiAgLy8gICAvLyAgICAgfQogIC8vICAgLy8gICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSBwcm9wc1ttZWRpYV0ud2lkdGggfHwgcHJvcHMud2lkdGg7CiAgLy8gICAvLyAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBwcm9wc1ttZWRpYV0uaGVpZ2h0IHx8IHByb3BzLmhlaWdodDsKICAvLyAgIC8vICAgfTsKICAvLyAgIC8vICAgaWYgKHByb3BzLnNtYWxsIHx8IHByb3BzLm1lZGl1bSB8fCBwcm9wcy5sYXJnZSB8fCBwcm9wcy54bGFyZ2UpIHsKICAvLyAgIC8vICAgICBpZiAoc2NyZWVuLnNtYWxsKSB7CiAgLy8gICAvLyAgICAgICB1cGRhdGVFbGVtZW50KCdzbWFsbCcpOwogIC8vICAgLy8gICAgIH0gZWxzZSBpZiAoc2NyZWVuLm1lZGl1bSkgewogIC8vICAgLy8gICAgICAgdXBkYXRlRWxlbWVudCgnbWVkaXVtJyk7CiAgLy8gICAvLyAgICAgfSBlbHNlIGlmIChzY3JlZW4ubGFyZ2UpIHsKICAvLyAgIC8vICAgICAgIHVwZGF0ZUVsZW1lbnQoJ2xhcmdlJyk7CiAgLy8gICAvLyAgICAgfSBlbHNlIGlmIChzY3JlZW4ueGxhcmdlKSB7CiAgLy8gICAvLyAgICAgICB1cGRhdGVFbGVtZW50KCd4bGFyZ2UnKTsKICAvLyAgIC8vICAgICB9CiAgLy8gICAvLyAgIH0KICAvLyAgIC8vIH0KICAvLyB9CiAgdmFyIGNsYXNzTmFtZXMgPSAiQ292ZXJJbWcgIi5jb25jYXQoY2xhc3NOYW1lKTsKCiAgdmFyIF90aGVtZWQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBbY292ZXJJbWdUaGVtZV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aGVtZWQpKTsKICB9LCBbY292ZXJJbWdUaGVtZSwgdGhlbWVkXSk7CgogIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEJhc2UsIE9iamVjdC5hc3NpZ24oewogICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzLAogICAgdGhlbWVkOiBfdGhlbWVkCiAgfSwgcHJvcHNSZXN0LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA3OAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KE92ZXJsYXksIHsKICAgIGJhY2tncm91bmQ6IG92ZXJsYXksCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA3OQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCBjaGlsZHJlbik7Cn07CgpfX3NpZ25hdHVyZV9fKENvdmVySW1nLCAidXNlTWVtb3tfdGhlbWVkfSIpOwoKaWYgKHR5cGVvZiBDb3ZlckltZyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ292ZXJJbWcgJiYgQ292ZXJJbWcgPT09IE9iamVjdChDb3ZlckltZykgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShDb3ZlckltZykpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ292ZXJJbWcsICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJDb3ZlckltZyIsCiAgICAgIGZpbGVuYW1lOiAic3JjL0NvdmVySW1nL0NvdmVySW1nLnRzeCIKICAgIH0KICB9KTsKfQoKQ292ZXJJbWcuZGVmYXVsdFByb3BzID0gewogIGNsYXNzTmFtZTogJycsCiAgY292ZXI6IHRydWUsCiAgaGVpZ2h0OiAnMzAwcHgnLAogIHBvc2l0aW9uOiAnNTAlIDUwJScsCiAgcmVwZWF0OiBmYWxzZSwKICB0aGVtZWQ6IFtdLAogIHdpZHRoOiAnMTAwJScsCiAgcGFyYWxsYXg6IGZhbHNlCn07CnZhciBfZGVmYXVsdCA9IENvdmVySW1nOwpleHBvcnQgZGVmYXVsdCBfZGVmYXVsdDsKCmlmICh0eXBlb2YgQ292ZXJJbWcgIT09ICd1bmRlZmluZWQnICYmIENvdmVySW1nICYmIENvdmVySW1nID09PSBPYmplY3QoQ292ZXJJbWcpICYmIE9iamVjdC5pc0V4dGVuc2libGUoQ292ZXJJbWcpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvdmVySW1nLCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiQ292ZXJJbWciLAogICAgICBmaWxlbmFtZTogInNyYy9Db3ZlckltZy9Db3ZlckltZy50c3giCiAgICB9CiAgfSk7Cn0KCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIHJlYWN0SG90TG9hZGVyID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkuZGVmYXVsdDsKCiAgaWYgKCFyZWFjdEhvdExvYWRlcikgewogICAgcmV0dXJuOwogIH0KCiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoT3ZlcmxheSwgIk92ZXJsYXkiLCAiL21udC9TdG9yYWdlL1Byb2plY3RzL3JlZGVzaWduL3NyYy9Db3ZlckltZy9Db3ZlckltZy50c3giKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihDb3ZlckltZywgIkNvdmVySW1nIiwgIi9tbnQvU3RvcmFnZS9Qcm9qZWN0cy9yZWRlc2lnbi9zcmMvQ292ZXJJbWcvQ292ZXJJbWcudHN4Iik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoX2RlZmF1bHQsICJkZWZhdWx0IiwgIi9tbnQvU3RvcmFnZS9Qcm9qZWN0cy9yZWRlc2lnbi9zcmMvQ292ZXJJbWcvQ292ZXJJbWcudHN4Iik7Cn0pKCk7Cgo7CgooZnVuY3Rpb24gKCkgewogIHZhciBsZWF2ZU1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmxlYXZlTW9kdWxlOwogIGxlYXZlTW9kdWxlICYmIGxlYXZlTW9kdWxlKG1vZHVsZSk7Cn0pKCk7"},{"version":3,"sources":["/mnt/Storage/Projects/redesign/src/CoverImg/CoverImg.tsx"],"names":["React","useMemo","Base","coverImgTheme","Container","Overlay","background","bgColor","CoverImg","children","className","themed","overlay","propsRest","classNames","_themed","defaultProps","cover","height","position","repeat","width","parallax"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AAEA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAGA,SAASC,SAAT,QAA0B,cAA1B;AAEA,OAAO,SAASC,OAAT,OAAyD;AAAA,MAAtCC,UAAsC,QAAtCA,UAAsC;AAC9D,MAAMC,OAAO,GAAG,OAAOD,UAAP,KAAsB,QAAtB,GAAiCA,UAAjC,GAA8C,WAA9D;AAEA,SAAOA,UAAU,GACf,oBAAC,SAAD;AACE,IAAA,GAAG,+DAEaC,OAFb,iEADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADe,GASb,IATJ;AAUD;;;;;;;;;;;;;AAED,OAAO,IAAMC,QAAQ,GAAG,SAASA,QAAT,QAMF;AAAA,MALpBC,QAKoB,SALpBA,QAKoB;AAAA,MAJpBC,SAIoB,SAJpBA,SAIoB;AAAA,MAHpBC,MAGoB,SAHpBA,MAGoB;AAAA,MAFpBC,OAEoB,SAFpBA,OAEoB;AAAA,MADjBC,SACiB;;AACpB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMC,UAAU,sBAAeJ,SAAf,CAAhB;;AACA,MAAMK,OAAO,GAAGd,OAAO,CAAC;AAAA,YAAOE,aAAP,4BAAyBQ,MAAzB;AAAA,GAAD,EAAmC,CACxDR,aADwD,EAExDQ,MAFwD,CAAnC,CAAvB;;AAKA,SACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEG,UAAjB;AAA6B,IAAA,MAAM,EAAEC;AAArC,KAAkDF,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,oBAAC,OAAD;AAAS,IAAA,UAAU,EAAED,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGH,QAFH,CADF;AAMD,CA3DM;;cAAMD,Q;;;;;;;;;;;;;AA6DbA,QAAQ,CAACQ,YAAT,GAAwB;AACtBN,EAAAA,SAAS,EAAE,EADW;AAEtBO,EAAAA,KAAK,EAAE,IAFe;AAGtBC,EAAAA,MAAM,EAAE,OAHc;AAItBC,EAAAA,QAAQ,EAAE,SAJY;AAKtBC,EAAAA,MAAM,EAAE,KALc;AAMtBT,EAAAA,MAAM,EAAE,EANc;AAOtBU,EAAAA,KAAK,EAAE,MAPe;AAQtBC,EAAAA,QAAQ,EAAE;AARY,CAAxB;eAWed,Q;AAAf;;;;;;;;;;;;;;;;;;;;;;0BAvFgBH,O;0BAeHG,Q","sourcesContent":["import React, { useMemo } from 'react';\n\nimport Base from '../Base/Base';\nimport { coverImgTheme } from './coverImg.theme';\nimport { CoverImgInterface } from './coverImg.types';\n\nimport { Container } from '../Container';\n\nexport function Overlay({ background }: { background: string }) {\n  const bgColor = typeof background === 'string' ? background : '#00000080';\n\n  return background ? (\n    <Container\n      css={`\n        position: absolute;\n        background: ${bgColor};\n        width: inherit;\n        height: inherit;\n      `}\n    />\n  ) : null;\n}\n\nexport const CoverImg = function CoverImg({\n  children,\n  className,\n  themed,\n  overlay,\n  ...propsRest\n}: CoverImgInterface) {\n  // componentDidMount() {\n  //   // this.element = helpers.getElement(this.props.kitid);\n  //   // this.updateImg(this.element);\n  //   // window.addEventListener('resize', this.updateImg);\n  // }\n\n  // componentWillUnmount() {\n  //   // window.removeEventListener('resize', this.updateImg);\n  // }\n\n  // updateImg() {\n  //   // const props = this.props;\n  //   // const element = this.element;\n  //   // let screen = helpers.breakpoints().screen;\n  //   // let locked = false;\n  //   // if (!locked) {\n  //   //   const updateElement = (media) => {\n  //   //     if (props.cover) {\n  //   //       element.style.backgroundImage = props[media].src  `url(${props[media].src})` : `url(${props.src})`;\n  //   //     } else {\n  //   //       element.src = props[media].src || props.src;\n  //   //       element.alt = props[media].alt || props.alt;\n  //   //     }\n  //   //     element.style.width = props[media].width || props.width;\n  //   //     element.style.height = props[media].height || props.height;\n  //   //   };\n  //   //   if (props.small || props.medium || props.large || props.xlarge) {\n  //   //     if (screen.small) {\n  //   //       updateElement('small');\n  //   //     } else if (screen.medium) {\n  //   //       updateElement('medium');\n  //   //     } else if (screen.large) {\n  //   //       updateElement('large');\n  //   //     } else if (screen.xlarge) {\n  //   //       updateElement('xlarge');\n  //   //     }\n  //   //   }\n  //   // }\n  // }\n\n  const classNames = `CoverImg ${className}`;\n  const _themed = useMemo(() => [coverImgTheme, ...themed], [\n    coverImgTheme,\n    themed,\n  ]);\n\n  return (\n    <Base className={classNames} themed={_themed} {...propsRest}>\n      <Overlay background={overlay} />\n      {children}\n    </Base>\n  );\n};\n\nCoverImg.defaultProps = {\n  className: '',\n  cover: true,\n  height: '300px',\n  position: '50% 50%',\n  repeat: false,\n  themed: [],\n  width: '100%',\n  parallax: false,\n};\n\nexport default CoverImg;\n"]}]}