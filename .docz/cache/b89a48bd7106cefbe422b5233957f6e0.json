{"remainingRequest":"/mnt/Storage/Projects/themed-styled-components/node_modules/thread-loader/dist/cjs.js??ref--5-1!/mnt/Storage/Projects/themed-styled-components/node_modules/babel-loader/lib/index.js??ref--5-2!/mnt/Storage/Projects/themed-styled-components/node_modules/source-map-loader/index.js!/mnt/Storage/Projects/themed-styled-components/src/Toolbar/ToolbarCopyButton.js","dependencies":[{"path":"/mnt/Storage/Projects/themed-styled-components/src/Toolbar/ToolbarCopyButton.js","mtime":1557736377510},{"path":"/mnt/Storage/Projects/themed-styled-components/node_modules/cache-loader/dist/cjs.js","mtime":1550658762297},{"path":"/mnt/Storage/Projects/themed-styled-components/node_modules/thread-loader/dist/cjs.js","mtime":1555245588536},{"path":"/mnt/Storage/Projects/themed-styled-components/node_modules/babel-loader/lib/index.js","mtime":1550658760833},{"path":"/mnt/Storage/Projects/themed-styled-components/node_modules/source-map-loader/index.js","mtime":1550658762472}],"contextDependencies":[],"result":["import _objectWithoutProperties from \"/mnt/Storage/Projects/themed-styled-components/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/mnt/Storage/Projects/themed-styled-components/src/Toolbar/ToolbarCopyButton.js\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React, { useMemo } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Copy } from '../MaterialIcons/Copy';\nimport ButtonIcon from '../ButtonIcon/ButtonIcon';\nexport var ToolbarCopyButton = React.memo(function ToolbarCopyButton(_ref) {\n  var data = _ref.data,\n      hasViews = _ref.hasViews,\n      onClick = _ref.onClick,\n      propsRest = _objectWithoutProperties(_ref, [\"data\", \"hasViews\", \"onClick\"]);\n\n  var text = typeof data === 'string' ? data : JSON.stringify(data, null, 2);\n\n  function handleClick(e) {\n    e.preventDefault();\n    onClick && onClick(e); //TODO: add copied notification\n  }\n\n  var icon = useMemo(function () {\n    return Copy;\n  }, [Copy]);\n  return React.createElement(CopyToClipboard, {\n    text: text,\n    copy: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(ButtonIcon, Object.assign({\n    uid: \"copy\",\n    icon: icon\n  }, propsRest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })));\n});\n\nif (typeof ToolbarCopyButton !== 'undefined' && ToolbarCopyButton && ToolbarCopyButton === Object(ToolbarCopyButton) && Object.isExtensible(ToolbarCopyButton)) {\n  Object.defineProperty(ToolbarCopyButton, '__filemeta', {\n    enumerable: true,\n    configurable: true,\n    value: {\n      name: \"ToolbarCopyButton\",\n      filename: \"src/Toolbar/ToolbarCopyButton.js\"\n    }\n  });\n}\n\nvar _default = ToolbarCopyButton;\nexport default _default;\n\nif (typeof ToolbarCopyButton !== 'undefined' && ToolbarCopyButton && ToolbarCopyButton === Object(ToolbarCopyButton) && Object.isExtensible(ToolbarCopyButton)) {\n  Object.defineProperty(ToolbarCopyButton, '__filemeta', {\n    enumerable: true,\n    configurable: true,\n    value: {\n      name: \"ToolbarCopyButton\",\n      filename: \"src/Toolbar/ToolbarCopyButton.js\"\n    }\n  });\n}\n\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ToolbarCopyButton, \"ToolbarCopyButton\", \"/mnt/Storage/Projects/themed-styled-components/src/Toolbar/ToolbarCopyButton.js\");\n  reactHotLoader.register(_default, \"default\", \"/mnt/Storage/Projects/themed-styled-components/src/Toolbar/ToolbarCopyButton.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();",{"version":3,"sources":["/mnt/Storage/Projects/themed-styled-components/src/Toolbar/ToolbarCopyButton.js"],"names":["React","useMemo","CopyToClipboard","Copy","ButtonIcon","ToolbarCopyButton","memo","data","hasViews","onClick","propsRest","text","JSON","stringify","handleClick","e","preventDefault","icon"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AAEA,SAASC,IAAT,QAAqB,uBAArB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,OAAO,IAAMC,iBAAiB,GAAGL,KAAK,CAACM,IAAN,CAAW,SAASD,iBAAT,OAKzC;AAAA,MAJDE,IAIC,QAJDA,IAIC;AAAA,MAHDC,QAGC,QAHDA,QAGC;AAAA,MAFDC,OAEC,QAFDA,OAEC;AAAA,MADEC,SACF;;AACD,MAAMC,IAAI,GAAG,OAAOJ,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCK,IAAI,CAACC,SAAL,CAAeN,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAA/C;;AAEA,WAASO,WAAT,CAAqBC,CAArB,EAAwB;AACtBA,IAAAA,CAAC,CAACC,cAAF;AACAP,IAAAA,OAAO,IAAIA,OAAO,CAACM,CAAD,CAAlB,CAFsB,CAGtB;AACD;;AAED,MAAME,IAAI,GAAGhB,OAAO,CAAC;AAAA,WAAME,IAAN;AAAA,GAAD,EAAa,CAACA,IAAD,CAAb,CAApB;AAEA,SACE,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAEQ,IAAvB;AAA6B,IAAA,IAAI,EAAEG,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAC,MAAhB;AAAuB,IAAA,IAAI,EAAEG;AAA7B,KAAuCP,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD,CArBgC,CAA1B;;;;;;;;;;;;;eAuBQL,iB;AAAf;;;;;;;;;;;;;;;;;;;;;;0BAvBaA,iB","sourcesContent":["import React, { useMemo } from 'react'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\n\nimport { Copy } from '../MaterialIcons/Copy'\nimport ButtonIcon from '../ButtonIcon/ButtonIcon'\n\nexport const ToolbarCopyButton = React.memo(function ToolbarCopyButton({\n  data,\n  hasViews,\n  onClick,\n  ...propsRest\n}) {\n  const text = typeof data === 'string' ? data : JSON.stringify(data, null, 2)\n\n  function handleClick(e) {\n    e.preventDefault()\n    onClick && onClick(e)\n    //TODO: add copied notification\n  }\n\n  const icon = useMemo(() => Copy, [Copy])\n\n  return (\n    <CopyToClipboard text={text} copy={handleClick}>\n      <ButtonIcon uid=\"copy\" icon={icon} {...propsRest} />\n    </CopyToClipboard>\n  )\n})\n\nexport default ToolbarCopyButton\n"]}]}