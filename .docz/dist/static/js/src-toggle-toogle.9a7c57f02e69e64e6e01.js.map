{"version":3,"sources":["/mnt/Storage/Projects/redesign/src/Toggle/toggle.theme.ts","/mnt/Storage/Projects/redesign/src/Toggle/Toggle.tsx","/mnt/Storage/Projects/redesign/src/Toggle/toggle.example.ts","/mnt/Storage/Projects/redesign/src/Toggle/toogle.mdx"],"names":["toggleTheme","_ref","Object","objectDestructuringEmpty","display","toggleAppearanceTheme","_ref2","appearance","_ref2$theme","theme","border","color","unit","foreground","backgroundColor","danger","paddingLeft","paddingRight","thinDanger","toggleInputTheme","_ref3","boxSizing","height","width","visibility","&:checked + label","background","&:checked + label:after","left","transform","toggleLabelTheme","_ref4","checked","position","cursor","textIndent","hideText","borderRadius","fontSize","lineHeight","textAlign","toggleContentTheme","_ref5","toggle","transition"," &:active","ToggleInput","className","propsRest","themed","objectWithoutProperties","classNames","concat","_themed","useMemo","react_default","a","createElement","Base","assign","as","type","ToggleLabel","ToggleContent","Toggle","id","children","toConsumableArray","_toggle","slicedToArray","state","setState","htmlFor","onClick","e","preventDefault","elevate","defaultProps","ToggleContainer","useState","layoutProps","MDXLayout","MDXContent","components","props","index_es","mdxType","index_esm","of","__position","__code","__scope","this","Playground","Props","styled","ThemeProvider","toggle_example_ToggleContainer","isMDXComponent"],"mappings":"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","file":"static/js/src-toggle-toogle.d2913cbb.js","sourcesContent":["import {\n  ToggleInterface,\n  ToggleInputInterface,\n  ToggleLabelInterface,\n  ToggleContentInterface,\n} from './toggle.types';\n\nexport function toggleTheme({  }: ToggleInterface) {\n  return {\n    display: 'inline',\n  };\n}\n\nexport function toggleAppearanceTheme({\n  appearance,\n  theme: { border, color, unit },\n}: ToggleInterface) {\n  switch (appearance) {\n    case 'primary':\n      return {\n        color: color.foreground,\n        backgroundColor: color.danger,\n        paddingLeft: unit[2],\n        paddingRight: unit[2],\n      };\n    case 'secondary':\n      return {\n        border: border.thinDanger,\n        paddingLeft: unit[2],\n        paddingRight: unit[2],\n      };\n    default:\n      return '';\n  }\n}\n\nexport function toggleInputTheme({ theme: { color } }: ToggleInputInterface) {\n  return {\n    boxSizing: 'border-box',\n    height: 0,\n    width: 0,\n    visibility: 'hidden',\n\n    '&:checked + label': {\n      background: color['grey-100'],\n    },\n\n    '&:checked + label:after': {\n      left: 'calc(100% - 5px)',\n      transform: 'translateX(-100%)',\n    },\n  };\n}\n\nexport function toggleLabelTheme({\n  theme: { color },\n  checked,\n  height,\n  hideText,\n  width,\n}: ToggleLabelInterface) {\n  return {\n    position: 'relative',\n    boxSizing: 'border-box',\n    cursor: 'pointer',\n    textIndent: hideText ? '-9999px' : 'initial',\n    width: width,\n    height: height,\n    background: color['grey-700'],\n    display: 'inline-block',\n    borderRadius: '100px',\n    fontSize: height,\n    lineHeight: height,\n    textAlign: checked ? 'left' : 'right',\n  };\n}\n\nexport function toggleContentTheme({\n  theme: { color },\n  toggle,\n  height,\n  width,\n}: ToggleContentInterface) {\n  return {\n    position: 'absolute',\n    boxSizing: 'border-box',\n    width: width,\n    height: height,\n    background: toggle ? color['grey-500'] : color['grey-400'],\n    borderRadius: '90px',\n    transform: toggle ? 'translateX(100%);' : 'translate(0);',\n    transition: '0.3s',\n\n    ' &:active': {\n      width: '25px',\n      // transform: translateX(calc(100%  - 25px),\n    },\n  };\n}\n","import React, { useMemo } from 'react';\n\nimport { Base } from '../Base';\nimport {\n  ToggleInterface,\n  ToggleInputInterface,\n  ToggleLabelInterface,\n  ToggleContentInterface,\n} from './toggle.types';\nimport {\n  // toggleAppearanceTheme,\n  toggleInputTheme,\n  toggleLabelTheme,\n  toggleTheme,\n  toggleContentTheme,\n} from './toggle.theme';\n\nexport function ToggleInput({\n  checked,\n  className,\n  themed,\n  ...propsRest\n}: ToggleInputInterface) {\n  const classNames = `ToggleInput ${className}`;\n  const _themed = useMemo(() => [toggleInputTheme], [toggleInputTheme]);\n\n  return (\n    <Base\n      as=\"input\"\n      type=\"checkbox\"\n      className={classNames}\n      themed={_themed}\n      {...propsRest}\n    />\n  );\n}\n\nToggleInput.defaultProps = {\n  className: '',\n};\n\nexport function ToggleLabel({\n  checked,\n  className,\n  ...propsRest\n}: ToggleLabelInterface) {\n  const classNames = `ToggleLabel ${className}`;\n  const _themed = useMemo(() => [toggleLabelTheme], [toggleLabelTheme, ,]);\n\n  return (\n    <Base as=\"label\" className={classNames} themed={_themed} {...propsRest} />\n  );\n}\n\nexport function ToggleContent({\n  checked,\n  className,\n  ...propsRest\n}: ToggleContentInterface) {\n  const classNames = `ToggleContent ${className}`;\n  const _themed = useMemo(() => [toggleContentTheme], [toggleContentTheme, ,]);\n\n  return (\n    <Base as=\"label\" className={classNames} themed={_themed} {...propsRest} />\n  );\n}\n\nToggleContent.defaultProps = {\n  className: '',\n  width: '90px',\n  height: '90px',\n  themed: [],\n};\n\nexport function Toggle({\n  id,\n  children,\n  className,\n  hideText,\n  height,\n  toggle,\n  width,\n  themed,\n  ...propsRest\n}: ToggleInterface) {\n  const classNames = `Toggle ${className}`;\n  const _themed = useMemo(() => [toggleTheme, ...themed], [\n    toggleTheme,\n    themed,\n  ]);\n  const [state, setState] = toggle;\n\n  function handleClick(e) {\n    e.preventDefault();\n    setState(!state);\n  }\n\n  return (\n    <Base className={classNames} themed={_themed} {...propsRest}>\n      <ToggleInput\n        checked={state}\n        height={height}\n        id={id}\n        type=\"checkbox\"\n        width={width}\n      />\n      <ToggleLabel\n        checked={state}\n        height={height}\n        hideText={hideText}\n        htmlFor={id}\n        onClick={handleClick}\n        width={width}\n      >\n        {children || (\n          <ToggleContent\n            elevate={1}\n            toggle={state}\n            width=\"20px\"\n            height=\"20px\"\n          />\n        )}\n      </ToggleLabel>\n    </Base>\n  );\n}\n\nToggle.defaultProps = {\n  className: '',\n  width: '40px',\n  height: '20px',\n  themed: [],\n};\n\nexport default Toggle;\n","import { useMemo, useState } from 'react';\n\nexport const ToggleContainer = function ToggleContainer({\n  children,\n}: {\n  children: any;\n}) {\n  const toggle = useState(false);\n\n  const context = useMemo(() => toggle, [toggle]);\n\n  return children(context);\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport styled from 'styled-components';\nimport { ThemeProvider } from '../ThemeContext/ThemeProvider';\nimport { Toggle } from './Toggle';\nimport { ToggleContainer } from './toggle.example';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"toggle\"\n    }}>{`Toggle`}</h1>\n    <Props of={Toggle} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"default\"\n    }}>{`Default`}</h2>\n    <Playground __position={1} __code={'<ThemeProvider>\\n  <ToggleContainer>\\n    {toggle => <Toggle id=\\\"switch\\\" toggle={toggle} />}\\n  </ToggleContainer>\\n</ThemeProvider>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      styled,\n      ThemeProvider,\n      Toggle,\n      ToggleContainer\n    }} mdxType=\"Playground\">\n  <ThemeProvider mdxType=\"ThemeProvider\">\n    <ToggleContainer mdxType=\"ToggleContainer\">\n      {toggle => <Toggle id=\"switch\" toggle={toggle} mdxType=\"Toggle\" />}\n    </ToggleContainer>\n  </ThemeProvider>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}