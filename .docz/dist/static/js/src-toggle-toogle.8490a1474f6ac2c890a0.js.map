{"version":3,"sources":["/mnt/Storage/Projects/redesign-system/src/Toggle/Toggle.js","/mnt/Storage/Projects/redesign-system/src/Toggle/toggle.example.js","/mnt/Storage/Projects/redesign-system/src/Toggle/toogle.mdx"],"names":["ToggleStyled","styled","div","_templateObject","ToggleInput","input","_templateObject2","_ref","color","theme","concat","sharedStyles","props","css","ToggleLabel","label","_templateObject3","_ref2","checked","height","hideText","width","Component","_templateObject4","_ref3","toggle","Toggle","_ref4","id","children","_toggle","Object","slicedToArray","state","setState","useTheme","react_default","a","createElement","type","htmlFor","onClick","e","preventDefault","elevate","defaultProps","ToggleContainer","React","memo","useState","useMemo","layoutProps","MDXLayout","MDXContent","components","objectWithoutProperties","index_es","assign","mdxType","index_esm","of","__position","__code","__scope","this","Playground","Props","ThemeProvider","__codesandbox","ThemeContext","toggle_example_ToggleContainer","isMDXComponent"],"mappings":"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","file":"static/js/src-toggle-toogle.e929f4b7.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useTheme } from '../ThemeContext'\nimport { sharedStyles } from '../utils'\n\nconst ToggleStyled = styled.div`\n  display: inline;\n`\n\nconst ToggleInput = styled.input`\n  ${({ theme: { color } }) => `\n      box-sizing: border-box;\n      height: 0;\n      width: 0;\n      visibility: hidden;\n\n      &:checked + label {\n        background: ${color['grey-100']};\n      }\n\n      &:checked + label:after {\n        left: calc(100% - 5px);\n        transform: translateX(-100%);\n      }\n  `}\n  ${sharedStyles};\n  ${props => props.css};\n`\nexport const ToggleLabel = styled.label`\n  ${({ theme: { color }, checked, height, hideText, width }) => `\n    position: relative;\n    box-sizing: border-box;off\n    cursor: pointer;\n    text-indent ${hideText ? '-9999px' : 'inital'};\n    width: ${width};\n    height: ${height};\n    background: ${color['grey-700']};\n    display: inline-block;\n    border-radius: 100px;\n    font-size: ${height};\n    line-height: ${height};\n\n    text-align: ${checked ? 'left' : 'right'}\n  `}\n  ${sharedStyles};\n  ${props => props.css};\n`\n\nconst Component = styled.div`\n  ${({ theme: { color }, toggle, height, width }) => `\n    position: absolute;\n    box-sizing: border-box;\n    width: ${width};\n    height: ${width};\n    background: ${toggle ? color['grey-500'] : color['grey-400']};\n    border-radius: 90px;\n    transform: translateX(0);\n    transition: 0.3s;\n\n    &:active {\n      width: 25px;\n    // transform: translateX(calc(100%  - 25px);\n    }\n\n    ${toggle ? 'transform: translateX(100%);' : 'transform : translate(0);'}\n  `}\n  ${sharedStyles};\n  ${props => props.css};\n`\n\nexport function Toggle({ id, children, hideText, height, toggle, width }) {\n  const [state, setState] = toggle\n\n  function handleClick(e) {\n    e.preventDefault()\n    setState(!state)\n  }\n\n  const { theme } = useTheme()\n\n  return (\n    <ToggleStyled theme={theme}>\n      <ToggleInput theme={theme} type=\"checkbox\" id={id} checked={state} />\n      <ToggleLabel\n        htmlFor={id}\n        onClick={handleClick}\n        height={height}\n        hideText={hideText}\n        width={width}\n        checked={state}\n        theme={theme}>\n        {children || (\n          <Component\n            elevate={1}\n            theme={theme}\n            toggle={state}\n            width=\"20px\"\n            height=\"20px\"\n          />\n        )}\n      </ToggleLabel>\n    </ToggleStyled>\n  )\n}\n\nToggle.defaultProps = {\n  width: '40px',\n  height: '20px',\n}\n\nComponent.defaultProps = {\n  width: '90px',\n  height: '90px',\n}\n\nexport default Toggle\n","import React, { useMemo, useState } from 'react'\n\nexport const ToggleContainer = React.memo(function ToggleContainer({\n  children,\n}) {\n  const toggle = useState(false)\n\n  function handleClick() {\n    const [value, setToggle] = toggle\n    setToggle(!value)\n  }\n\n  const context = useMemo(() => toggle, [toggle])\n\n  return children(context)\n})\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz'\nimport styled from 'styled-components'\nimport { ThemeProvider } from '../ThemeContext'\nimport { Toggle } from './Toggle'\nimport { ToggleContainer } from './toggle.example.js'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`--\nname: Toggle`}</p>\n    <hr></hr>\n\n    <h1 {...{\n      \"id\": \"toggle\"\n    }}>{`Toggle`}</h1>\n    <Props of={Toggle} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"default\"\n    }}>{`Default`}</h2>\n    <Playground __position={1} __code={'<ThemeProvider>\\n  <ToggleContainer>\\n    {toggle => <Toggle id=\\\"switch\\\" toggle={toggle} />}\\n  </ToggleContainer>\\n</ThemeProvider>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      styled,\n      ThemeProvider,\n      Toggle,\n      ToggleContainer\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  <ThemeProvider mdxType=\"ThemeProvider\">\n    <ToggleContainer mdxType=\"ToggleContainer\">\n      {toggle => <Toggle id=\"switch\" toggle={toggle} mdxType=\"Toggle\" />}\n    </ToggleContainer>\n  </ThemeProvider>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}